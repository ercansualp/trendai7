/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * BackendForFrontend
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/vue-query';
import type {
  DataTag,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType
} from '@tanstack/vue-query';

import {
  unref
} from 'vue';
import type {
  MaybeRef
} from 'vue';

import type {
  ChatMessageDtoListPaginationResponseApiResponse,
  ChatSessionDtoApiResponse,
  ChatSessionDtoListApiResponse,
  ContentDto,
  GetChatBotApiGetMessagesParams,
  GetChatBotApiGetUserSessionsParams,
  GetContentManagementApiGetContentByIdParams,
  GetContentManagementApiGetFeaturedContentParams,
  LoginWithTwoFaResponseApiResponse,
  ProblemDetails,
  SendChatMessageRequest,
  SignInWithSmsOtpRequest,
  SignUpWithPhoneNumberRequest,
  StringApiResponse
} from '../../types/api';

import { backendForFrontendClient } from '../../mutators/backendForFrontendMutator';
type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const postChatBotApiSendMessage = (
    sendChatMessageRequest: MaybeRef<SendChatMessageRequest>,
 options?: SecondParameter<typeof backendForFrontendClient>,signal?: AbortSignal
) => {
      sendChatMessageRequest = unref(sendChatMessageRequest);
      
      return backendForFrontendClient<StringApiResponse>(
      {url: `/ChatBotApi/SendMessage`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: sendChatMessageRequest, signal
    },
      options);
    }
  


export const getPostChatBotApiSendMessageMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postChatBotApiSendMessage>>, TError,{data: SendChatMessageRequest}, TContext>, request?: SecondParameter<typeof backendForFrontendClient>}
): UseMutationOptions<Awaited<ReturnType<typeof postChatBotApiSendMessage>>, TError,{data: SendChatMessageRequest}, TContext> => {

const mutationKey = ['postChatBotApiSendMessage'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postChatBotApiSendMessage>>, {data: SendChatMessageRequest}> = (props) => {
          const {data} = props ?? {};

          return  postChatBotApiSendMessage(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostChatBotApiSendMessageMutationResult = NonNullable<Awaited<ReturnType<typeof postChatBotApiSendMessage>>>
    export type PostChatBotApiSendMessageMutationBody = SendChatMessageRequest
    export type PostChatBotApiSendMessageMutationError = unknown

    export const usePostChatBotApiSendMessage = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postChatBotApiSendMessage>>, TError,{data: SendChatMessageRequest}, TContext>, request?: SecondParameter<typeof backendForFrontendClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof postChatBotApiSendMessage>>,
        TError,
        {data: SendChatMessageRequest},
        TContext
      > => {

      const mutationOptions = getPostChatBotApiSendMessageMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getChatBotApiGetMessages = (
    params?: MaybeRef<GetChatBotApiGetMessagesParams>,
 options?: SecondParameter<typeof backendForFrontendClient>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return backendForFrontendClient<ChatMessageDtoListPaginationResponseApiResponse>(
      {url: `/ChatBotApi/GetMessages`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getGetChatBotApiGetMessagesQueryKey = (params?: MaybeRef<GetChatBotApiGetMessagesParams>,) => {
    return ['ChatBotApi','GetMessages', ...(params ? [params]: [])] as const;
    }

    
export const getGetChatBotApiGetMessagesQueryOptions = <TData = Awaited<ReturnType<typeof getChatBotApiGetMessages>>, TError = unknown>(params?: MaybeRef<GetChatBotApiGetMessagesParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChatBotApiGetMessages>>, TError, TData>>, request?: SecondParameter<typeof backendForFrontendClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetChatBotApiGetMessagesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getChatBotApiGetMessages>>> = ({ signal }) => getChatBotApiGetMessages(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getChatBotApiGetMessages>>, TError, TData> 
}

export type GetChatBotApiGetMessagesQueryResult = NonNullable<Awaited<ReturnType<typeof getChatBotApiGetMessages>>>
export type GetChatBotApiGetMessagesQueryError = unknown



export function useGetChatBotApiGetMessages<TData = Awaited<ReturnType<typeof getChatBotApiGetMessages>>, TError = unknown>(
 params?: MaybeRef<GetChatBotApiGetMessagesParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChatBotApiGetMessages>>, TError, TData>>, request?: SecondParameter<typeof backendForFrontendClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetChatBotApiGetMessagesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const getChatBotApiGetUserLastSession = (
    
 options?: SecondParameter<typeof backendForFrontendClient>,signal?: AbortSignal
) => {
      
      
      return backendForFrontendClient<ChatSessionDtoApiResponse>(
      {url: `/ChatBotApi/GetUserLastSession`, method: 'GET', signal
    },
      options);
    }
  

export const getGetChatBotApiGetUserLastSessionQueryKey = () => {
    return ['ChatBotApi','GetUserLastSession'] as const;
    }

    
export const getGetChatBotApiGetUserLastSessionQueryOptions = <TData = Awaited<ReturnType<typeof getChatBotApiGetUserLastSession>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChatBotApiGetUserLastSession>>, TError, TData>>, request?: SecondParameter<typeof backendForFrontendClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetChatBotApiGetUserLastSessionQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getChatBotApiGetUserLastSession>>> = ({ signal }) => getChatBotApiGetUserLastSession(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getChatBotApiGetUserLastSession>>, TError, TData> 
}

export type GetChatBotApiGetUserLastSessionQueryResult = NonNullable<Awaited<ReturnType<typeof getChatBotApiGetUserLastSession>>>
export type GetChatBotApiGetUserLastSessionQueryError = unknown



export function useGetChatBotApiGetUserLastSession<TData = Awaited<ReturnType<typeof getChatBotApiGetUserLastSession>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChatBotApiGetUserLastSession>>, TError, TData>>, request?: SecondParameter<typeof backendForFrontendClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetChatBotApiGetUserLastSessionQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const getChatBotApiGetUserSessions = (
    params?: MaybeRef<GetChatBotApiGetUserSessionsParams>,
 options?: SecondParameter<typeof backendForFrontendClient>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return backendForFrontendClient<ChatSessionDtoListApiResponse>(
      {url: `/ChatBotApi/GetUserSessions`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getGetChatBotApiGetUserSessionsQueryKey = (params?: MaybeRef<GetChatBotApiGetUserSessionsParams>,) => {
    return ['ChatBotApi','GetUserSessions', ...(params ? [params]: [])] as const;
    }

    
export const getGetChatBotApiGetUserSessionsQueryOptions = <TData = Awaited<ReturnType<typeof getChatBotApiGetUserSessions>>, TError = unknown>(params?: MaybeRef<GetChatBotApiGetUserSessionsParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChatBotApiGetUserSessions>>, TError, TData>>, request?: SecondParameter<typeof backendForFrontendClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetChatBotApiGetUserSessionsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getChatBotApiGetUserSessions>>> = ({ signal }) => getChatBotApiGetUserSessions(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getChatBotApiGetUserSessions>>, TError, TData> 
}

export type GetChatBotApiGetUserSessionsQueryResult = NonNullable<Awaited<ReturnType<typeof getChatBotApiGetUserSessions>>>
export type GetChatBotApiGetUserSessionsQueryError = unknown



export function useGetChatBotApiGetUserSessions<TData = Awaited<ReturnType<typeof getChatBotApiGetUserSessions>>, TError = unknown>(
 params?: MaybeRef<GetChatBotApiGetUserSessionsParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChatBotApiGetUserSessions>>, TError, TData>>, request?: SecondParameter<typeof backendForFrontendClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetChatBotApiGetUserSessionsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const getContentManagementApiGetContentById = (
    params?: MaybeRef<GetContentManagementApiGetContentByIdParams>,
 options?: SecondParameter<typeof backendForFrontendClient>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return backendForFrontendClient<ContentDto>(
      {url: `/ContentManagementApi/GetContentById`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getGetContentManagementApiGetContentByIdQueryKey = (params?: MaybeRef<GetContentManagementApiGetContentByIdParams>,) => {
    return ['ContentManagementApi','GetContentById', ...(params ? [params]: [])] as const;
    }

    
export const getGetContentManagementApiGetContentByIdQueryOptions = <TData = Awaited<ReturnType<typeof getContentManagementApiGetContentById>>, TError = ProblemDetails | void>(params?: MaybeRef<GetContentManagementApiGetContentByIdParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentManagementApiGetContentById>>, TError, TData>>, request?: SecondParameter<typeof backendForFrontendClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetContentManagementApiGetContentByIdQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getContentManagementApiGetContentById>>> = ({ signal }) => getContentManagementApiGetContentById(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getContentManagementApiGetContentById>>, TError, TData> 
}

export type GetContentManagementApiGetContentByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getContentManagementApiGetContentById>>>
export type GetContentManagementApiGetContentByIdQueryError = ProblemDetails | void



export function useGetContentManagementApiGetContentById<TData = Awaited<ReturnType<typeof getContentManagementApiGetContentById>>, TError = ProblemDetails | void>(
 params?: MaybeRef<GetContentManagementApiGetContentByIdParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentManagementApiGetContentById>>, TError, TData>>, request?: SecondParameter<typeof backendForFrontendClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetContentManagementApiGetContentByIdQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const getContentManagementApiGetAllContents = (
    
 options?: SecondParameter<typeof backendForFrontendClient>,signal?: AbortSignal
) => {
      
      
      return backendForFrontendClient<ContentDto[]>(
      {url: `/ContentManagementApi/GetAllContents`, method: 'GET', signal
    },
      options);
    }
  

export const getGetContentManagementApiGetAllContentsQueryKey = () => {
    return ['ContentManagementApi','GetAllContents'] as const;
    }

    
export const getGetContentManagementApiGetAllContentsQueryOptions = <TData = Awaited<ReturnType<typeof getContentManagementApiGetAllContents>>, TError = ProblemDetails | void>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentManagementApiGetAllContents>>, TError, TData>>, request?: SecondParameter<typeof backendForFrontendClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetContentManagementApiGetAllContentsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getContentManagementApiGetAllContents>>> = ({ signal }) => getContentManagementApiGetAllContents(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getContentManagementApiGetAllContents>>, TError, TData> 
}

export type GetContentManagementApiGetAllContentsQueryResult = NonNullable<Awaited<ReturnType<typeof getContentManagementApiGetAllContents>>>
export type GetContentManagementApiGetAllContentsQueryError = ProblemDetails | void



export function useGetContentManagementApiGetAllContents<TData = Awaited<ReturnType<typeof getContentManagementApiGetAllContents>>, TError = ProblemDetails | void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentManagementApiGetAllContents>>, TError, TData>>, request?: SecondParameter<typeof backendForFrontendClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetContentManagementApiGetAllContentsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const getContentManagementApiGetFeaturedContent = (
    params?: MaybeRef<GetContentManagementApiGetFeaturedContentParams>,
 options?: SecondParameter<typeof backendForFrontendClient>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return backendForFrontendClient<ContentDto>(
      {url: `/ContentManagementApi/GetFeaturedContent`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getGetContentManagementApiGetFeaturedContentQueryKey = (params?: MaybeRef<GetContentManagementApiGetFeaturedContentParams>,) => {
    return ['ContentManagementApi','GetFeaturedContent', ...(params ? [params]: [])] as const;
    }

    
export const getGetContentManagementApiGetFeaturedContentQueryOptions = <TData = Awaited<ReturnType<typeof getContentManagementApiGetFeaturedContent>>, TError = ProblemDetails | void>(params?: MaybeRef<GetContentManagementApiGetFeaturedContentParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentManagementApiGetFeaturedContent>>, TError, TData>>, request?: SecondParameter<typeof backendForFrontendClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetContentManagementApiGetFeaturedContentQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getContentManagementApiGetFeaturedContent>>> = ({ signal }) => getContentManagementApiGetFeaturedContent(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getContentManagementApiGetFeaturedContent>>, TError, TData> 
}

export type GetContentManagementApiGetFeaturedContentQueryResult = NonNullable<Awaited<ReturnType<typeof getContentManagementApiGetFeaturedContent>>>
export type GetContentManagementApiGetFeaturedContentQueryError = ProblemDetails | void



export function useGetContentManagementApiGetFeaturedContent<TData = Awaited<ReturnType<typeof getContentManagementApiGetFeaturedContent>>, TError = ProblemDetails | void>(
 params?: MaybeRef<GetContentManagementApiGetFeaturedContentParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentManagementApiGetFeaturedContent>>, TError, TData>>, request?: SecondParameter<typeof backendForFrontendClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetContentManagementApiGetFeaturedContentQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const postUserApiSignUpWithPhoneNumber = (
    signUpWithPhoneNumberRequest: MaybeRef<SignUpWithPhoneNumberRequest>,
 options?: SecondParameter<typeof backendForFrontendClient>,signal?: AbortSignal
) => {
      signUpWithPhoneNumberRequest = unref(signUpWithPhoneNumberRequest);
      
      return backendForFrontendClient<StringApiResponse>(
      {url: `/UserApi/SignUpWithPhoneNumber`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: signUpWithPhoneNumberRequest, signal
    },
      options);
    }
  


export const getPostUserApiSignUpWithPhoneNumberMutationOptions = <TError = StringApiResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserApiSignUpWithPhoneNumber>>, TError,{data: SignUpWithPhoneNumberRequest}, TContext>, request?: SecondParameter<typeof backendForFrontendClient>}
): UseMutationOptions<Awaited<ReturnType<typeof postUserApiSignUpWithPhoneNumber>>, TError,{data: SignUpWithPhoneNumberRequest}, TContext> => {

const mutationKey = ['postUserApiSignUpWithPhoneNumber'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUserApiSignUpWithPhoneNumber>>, {data: SignUpWithPhoneNumberRequest}> = (props) => {
          const {data} = props ?? {};

          return  postUserApiSignUpWithPhoneNumber(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUserApiSignUpWithPhoneNumberMutationResult = NonNullable<Awaited<ReturnType<typeof postUserApiSignUpWithPhoneNumber>>>
    export type PostUserApiSignUpWithPhoneNumberMutationBody = SignUpWithPhoneNumberRequest
    export type PostUserApiSignUpWithPhoneNumberMutationError = StringApiResponse

    export const usePostUserApiSignUpWithPhoneNumber = <TError = StringApiResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserApiSignUpWithPhoneNumber>>, TError,{data: SignUpWithPhoneNumberRequest}, TContext>, request?: SecondParameter<typeof backendForFrontendClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof postUserApiSignUpWithPhoneNumber>>,
        TError,
        {data: SignUpWithPhoneNumberRequest},
        TContext
      > => {

      const mutationOptions = getPostUserApiSignUpWithPhoneNumberMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const postUserApiSignInWithSmsOtp = (
    signInWithSmsOtpRequest: MaybeRef<SignInWithSmsOtpRequest>,
 options?: SecondParameter<typeof backendForFrontendClient>,signal?: AbortSignal
) => {
      signInWithSmsOtpRequest = unref(signInWithSmsOtpRequest);
      
      return backendForFrontendClient<LoginWithTwoFaResponseApiResponse>(
      {url: `/UserApi/SignInWithSmsOtp`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: signInWithSmsOtpRequest, signal
    },
      options);
    }
  


export const getPostUserApiSignInWithSmsOtpMutationOptions = <TError = LoginWithTwoFaResponseApiResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserApiSignInWithSmsOtp>>, TError,{data: SignInWithSmsOtpRequest}, TContext>, request?: SecondParameter<typeof backendForFrontendClient>}
): UseMutationOptions<Awaited<ReturnType<typeof postUserApiSignInWithSmsOtp>>, TError,{data: SignInWithSmsOtpRequest}, TContext> => {

const mutationKey = ['postUserApiSignInWithSmsOtp'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUserApiSignInWithSmsOtp>>, {data: SignInWithSmsOtpRequest}> = (props) => {
          const {data} = props ?? {};

          return  postUserApiSignInWithSmsOtp(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUserApiSignInWithSmsOtpMutationResult = NonNullable<Awaited<ReturnType<typeof postUserApiSignInWithSmsOtp>>>
    export type PostUserApiSignInWithSmsOtpMutationBody = SignInWithSmsOtpRequest
    export type PostUserApiSignInWithSmsOtpMutationError = LoginWithTwoFaResponseApiResponse

    export const usePostUserApiSignInWithSmsOtp = <TError = LoginWithTwoFaResponseApiResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserApiSignInWithSmsOtp>>, TError,{data: SignInWithSmsOtpRequest}, TContext>, request?: SecondParameter<typeof backendForFrontendClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof postUserApiSignInWithSmsOtp>>,
        TError,
        {data: SignInWithSmsOtpRequest},
        TContext
      > => {

      const mutationOptions = getPostUserApiSignInWithSmsOtpMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
