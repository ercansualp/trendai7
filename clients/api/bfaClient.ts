/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * BackendForAdmin
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/vue-query';
import type {
  DataTag,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType
} from '@tanstack/vue-query';

import {
  unref
} from 'vue';
import type {
  MaybeRef
} from 'vue';

import type {
  AIModelListApiResponse,
  AddPermissionToRoleRequest,
  AllChatSessionsListPaginationResponseApiResponse,
  ApplicationRoleListApiResponse,
  AssignRoleRequest,
  AuthorDto,
  BooleanApiResponse,
  ChangePasswordRequest,
  ChatMessageDtoListPaginationResponseApiResponse,
  ChatSessionDtoApiResponse,
  ChatSessionDtoListApiResponse,
  ChatSettingsDto,
  ChatSettingsDtoApiResponse,
  ClaimApiResponse,
  ClaimListApiResponse,
  ContentDto,
  ContentSourceDto,
  CreateAuthorRequest,
  CreateContentRequest,
  CreateContentSourceRequest,
  CreateJobInstanceRequest,
  CreateJobRequest,
  CreateMessageTemplateRequest,
  CreateRoleWithPermissionsRequest,
  CreateTagRequest,
  DeleteContentManagementApiDeleteAuthorParams,
  DeleteContentManagementApiDeleteContentParams,
  DeleteContentManagementApiDeleteContentSourceParams,
  DeleteContentManagementApiDeleteTagParams,
  DeleteNotificationApiDeleteTemplateParams,
  EmailMessageEvent,
  EmailSettingsDto,
  EmailSettingsDtoApiResponse,
  GetChatBotApiGetAllSessionsParams,
  GetChatBotApiGetMessagesParams,
  GetChatBotApiGetUserSessionsParams,
  GetContentManagementApiGetAuthorByIdParams,
  GetContentManagementApiGetContentByIdParams,
  GetContentManagementApiGetContentSourceByIdParams,
  GetContentManagementApiGetFeaturedContentParams,
  GetContentManagementApiGetTagByIdParams,
  GetNotificationApiGetEmailSettingsParams,
  GetNotificationApiGetNotificationRecordsByPaginationParams,
  GetNotificationApiGetPushNotificationSettingsParams,
  GetNotificationApiGetSmsSettingsParams,
  GetNotificationApiGetTelegramSettingsParams,
  GetNotificationApiGetTemplateParams,
  GetNotificationApiSendOtpParams,
  GetNotificationApiVerifyOtpParams,
  GetSchedulerApiDeleteJobParams,
  GetSchedulerApiGetJobLogsParams,
  GetSchedulerApiStartJobParams,
  GetSchedulerApiStopJobParams,
  GetUserApiCheckPasswordParams,
  GetUserApiConfirmEmailParams,
  GetUserApiCreateRoleParams,
  GetUserApiDeletePermissionParams,
  GetUserApiDeleteRoleParams,
  GetUserApiDisableTwoFactorParams,
  GetUserApiEnableTwoFactorParams,
  GetUserApiForgetPasswordParams,
  GetUserApiGetAllUsersParams,
  GetUserApiGetAuthenticatorKeyParams,
  GetUserApiGetAuthenticatorSetupParams,
  GetUserApiGetRolePermissionsParams,
  GetUserApiGetTwoFactorStatusParams,
  GetUserApiGetUserRolesParams,
  GetUserApiGetUserSecurityStampParams,
  GetUserApiGetUsersWithFullRoleObjectsParams,
  GetUserApiLogoutFromAllDevicesParams,
  GetUserApiSendConfirmationEmailParams,
  GetUserApiSendTwoFaCodeParams,
  Int32ApiResponse,
  JobDtoApiResponse,
  JobDtoListApiResponse,
  JobLogDtoListApiResponse,
  LoginRequest,
  LoginResponseApiResponse,
  LoginWithTwoFaRequest,
  LoginWithTwoFaResponseApiResponse,
  MessageTemplateDto,
  NotificationRecordDtoListPaginationResponseApiResponse,
  ProblemDetails,
  PushNotificationSettingsDto,
  PutContentManagementApiPublishContentParams,
  PutContentManagementApiUnPublishContentParams,
  PutNotificationApiUpdateTelegramSettingsParams,
  RefreshTokenRequest,
  RegisterUserRequest,
  RenderMessageTemplateRequest,
  ReplacePermissionsRequest,
  ResetPasswordRequest,
  RoleDtoListApiResponse,
  SendChatMessageRequest,
  SendTestPushNotificationRequest,
  SendTestSmsRequest,
  SignInWithSmsOtpRequest,
  SignUpWithPhoneNumberRequest,
  SmsSettingsDto,
  StringApiResponse,
  StringListApiResponse,
  TagDto,
  TelegramMessageEvent,
  TelegramSettingsDtoApiResponse,
  ToggleTotpRequest,
  UpdateAuthorRequest,
  UpdateContentRequest,
  UpdateContentSourceRequest,
  UpdateJobRequest,
  UpdateMessageTemplateRequest,
  UpdatePushNotificationSettingsRequest,
  UpdateTagRequest,
  UpdateUserInformationsRequest,
  UserProfileInfoDtoApiResponse,
  UserProfileInfoDtoListPaginationResponseApiResponse,
  UserWithRolesListPaginationResponseApiResponseTask
} from '../../types/api';

import { backendForAdminClient } from '../../mutators/backendForAdminMutator';
type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const postChatBotApiSendMessage = (
    sendChatMessageRequest: MaybeRef<SendChatMessageRequest>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      sendChatMessageRequest = unref(sendChatMessageRequest);
      
      return backendForAdminClient<StringApiResponse>(
      {url: `/ChatBotApi/SendMessage`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: sendChatMessageRequest, signal
    },
      options);
    }
  


export const getPostChatBotApiSendMessageMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postChatBotApiSendMessage>>, TError,{data: SendChatMessageRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof postChatBotApiSendMessage>>, TError,{data: SendChatMessageRequest}, TContext> => {

const mutationKey = ['postChatBotApiSendMessage'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postChatBotApiSendMessage>>, {data: SendChatMessageRequest}> = (props) => {
          const {data} = props ?? {};

          return  postChatBotApiSendMessage(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostChatBotApiSendMessageMutationResult = NonNullable<Awaited<ReturnType<typeof postChatBotApiSendMessage>>>
    export type PostChatBotApiSendMessageMutationBody = SendChatMessageRequest
    export type PostChatBotApiSendMessageMutationError = unknown

    export const usePostChatBotApiSendMessage = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postChatBotApiSendMessage>>, TError,{data: SendChatMessageRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof postChatBotApiSendMessage>>,
        TError,
        {data: SendChatMessageRequest},
        TContext
      > => {

      const mutationOptions = getPostChatBotApiSendMessageMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getChatBotApiGetMessages = (
    params?: MaybeRef<GetChatBotApiGetMessagesParams>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return backendForAdminClient<ChatMessageDtoListPaginationResponseApiResponse>(
      {url: `/ChatBotApi/GetMessages`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getGetChatBotApiGetMessagesQueryKey = (params?: MaybeRef<GetChatBotApiGetMessagesParams>,) => {
    return ['ChatBotApi','GetMessages', ...(params ? [params]: [])] as const;
    }

    
export const getGetChatBotApiGetMessagesQueryOptions = <TData = Awaited<ReturnType<typeof getChatBotApiGetMessages>>, TError = unknown>(params?: MaybeRef<GetChatBotApiGetMessagesParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChatBotApiGetMessages>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetChatBotApiGetMessagesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getChatBotApiGetMessages>>> = ({ signal }) => getChatBotApiGetMessages(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getChatBotApiGetMessages>>, TError, TData> 
}

export type GetChatBotApiGetMessagesQueryResult = NonNullable<Awaited<ReturnType<typeof getChatBotApiGetMessages>>>
export type GetChatBotApiGetMessagesQueryError = unknown



export function useGetChatBotApiGetMessages<TData = Awaited<ReturnType<typeof getChatBotApiGetMessages>>, TError = unknown>(
 params?: MaybeRef<GetChatBotApiGetMessagesParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChatBotApiGetMessages>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetChatBotApiGetMessagesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const postChatBotApiUpdateChatSettings = (
    chatSettingsDto: MaybeRef<ChatSettingsDto>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      chatSettingsDto = unref(chatSettingsDto);
      
      return backendForAdminClient<BooleanApiResponse>(
      {url: `/ChatBotApi/UpdateChatSettings`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: chatSettingsDto, signal
    },
      options);
    }
  


export const getPostChatBotApiUpdateChatSettingsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postChatBotApiUpdateChatSettings>>, TError,{data: ChatSettingsDto}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof postChatBotApiUpdateChatSettings>>, TError,{data: ChatSettingsDto}, TContext> => {

const mutationKey = ['postChatBotApiUpdateChatSettings'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postChatBotApiUpdateChatSettings>>, {data: ChatSettingsDto}> = (props) => {
          const {data} = props ?? {};

          return  postChatBotApiUpdateChatSettings(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostChatBotApiUpdateChatSettingsMutationResult = NonNullable<Awaited<ReturnType<typeof postChatBotApiUpdateChatSettings>>>
    export type PostChatBotApiUpdateChatSettingsMutationBody = ChatSettingsDto
    export type PostChatBotApiUpdateChatSettingsMutationError = unknown

    export const usePostChatBotApiUpdateChatSettings = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postChatBotApiUpdateChatSettings>>, TError,{data: ChatSettingsDto}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof postChatBotApiUpdateChatSettings>>,
        TError,
        {data: ChatSettingsDto},
        TContext
      > => {

      const mutationOptions = getPostChatBotApiUpdateChatSettingsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getChatBotApiGetChatSettings = (
    
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      
      
      return backendForAdminClient<ChatSettingsDtoApiResponse>(
      {url: `/ChatBotApi/GetChatSettings`, method: 'GET', signal
    },
      options);
    }
  

export const getGetChatBotApiGetChatSettingsQueryKey = () => {
    return ['ChatBotApi','GetChatSettings'] as const;
    }

    
export const getGetChatBotApiGetChatSettingsQueryOptions = <TData = Awaited<ReturnType<typeof getChatBotApiGetChatSettings>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChatBotApiGetChatSettings>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetChatBotApiGetChatSettingsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getChatBotApiGetChatSettings>>> = ({ signal }) => getChatBotApiGetChatSettings(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getChatBotApiGetChatSettings>>, TError, TData> 
}

export type GetChatBotApiGetChatSettingsQueryResult = NonNullable<Awaited<ReturnType<typeof getChatBotApiGetChatSettings>>>
export type GetChatBotApiGetChatSettingsQueryError = unknown



export function useGetChatBotApiGetChatSettings<TData = Awaited<ReturnType<typeof getChatBotApiGetChatSettings>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChatBotApiGetChatSettings>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetChatBotApiGetChatSettingsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const getChatBotApiGetUserLastSession = (
    
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      
      
      return backendForAdminClient<ChatSessionDtoApiResponse>(
      {url: `/ChatBotApi/GetUserLastSession`, method: 'GET', signal
    },
      options);
    }
  

export const getGetChatBotApiGetUserLastSessionQueryKey = () => {
    return ['ChatBotApi','GetUserLastSession'] as const;
    }

    
export const getGetChatBotApiGetUserLastSessionQueryOptions = <TData = Awaited<ReturnType<typeof getChatBotApiGetUserLastSession>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChatBotApiGetUserLastSession>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetChatBotApiGetUserLastSessionQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getChatBotApiGetUserLastSession>>> = ({ signal }) => getChatBotApiGetUserLastSession(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getChatBotApiGetUserLastSession>>, TError, TData> 
}

export type GetChatBotApiGetUserLastSessionQueryResult = NonNullable<Awaited<ReturnType<typeof getChatBotApiGetUserLastSession>>>
export type GetChatBotApiGetUserLastSessionQueryError = unknown



export function useGetChatBotApiGetUserLastSession<TData = Awaited<ReturnType<typeof getChatBotApiGetUserLastSession>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChatBotApiGetUserLastSession>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetChatBotApiGetUserLastSessionQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const getChatBotApiGetUserSessions = (
    params?: MaybeRef<GetChatBotApiGetUserSessionsParams>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return backendForAdminClient<ChatSessionDtoListApiResponse>(
      {url: `/ChatBotApi/GetUserSessions`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getGetChatBotApiGetUserSessionsQueryKey = (params?: MaybeRef<GetChatBotApiGetUserSessionsParams>,) => {
    return ['ChatBotApi','GetUserSessions', ...(params ? [params]: [])] as const;
    }

    
export const getGetChatBotApiGetUserSessionsQueryOptions = <TData = Awaited<ReturnType<typeof getChatBotApiGetUserSessions>>, TError = unknown>(params?: MaybeRef<GetChatBotApiGetUserSessionsParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChatBotApiGetUserSessions>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetChatBotApiGetUserSessionsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getChatBotApiGetUserSessions>>> = ({ signal }) => getChatBotApiGetUserSessions(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getChatBotApiGetUserSessions>>, TError, TData> 
}

export type GetChatBotApiGetUserSessionsQueryResult = NonNullable<Awaited<ReturnType<typeof getChatBotApiGetUserSessions>>>
export type GetChatBotApiGetUserSessionsQueryError = unknown



export function useGetChatBotApiGetUserSessions<TData = Awaited<ReturnType<typeof getChatBotApiGetUserSessions>>, TError = unknown>(
 params?: MaybeRef<GetChatBotApiGetUserSessionsParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChatBotApiGetUserSessions>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetChatBotApiGetUserSessionsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const getChatBotApiGetAIModels = (
    
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      
      
      return backendForAdminClient<AIModelListApiResponse>(
      {url: `/ChatBotApi/GetAIModels`, method: 'GET', signal
    },
      options);
    }
  

export const getGetChatBotApiGetAIModelsQueryKey = () => {
    return ['ChatBotApi','GetAIModels'] as const;
    }

    
export const getGetChatBotApiGetAIModelsQueryOptions = <TData = Awaited<ReturnType<typeof getChatBotApiGetAIModels>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChatBotApiGetAIModels>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetChatBotApiGetAIModelsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getChatBotApiGetAIModels>>> = ({ signal }) => getChatBotApiGetAIModels(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getChatBotApiGetAIModels>>, TError, TData> 
}

export type GetChatBotApiGetAIModelsQueryResult = NonNullable<Awaited<ReturnType<typeof getChatBotApiGetAIModels>>>
export type GetChatBotApiGetAIModelsQueryError = unknown



export function useGetChatBotApiGetAIModels<TData = Awaited<ReturnType<typeof getChatBotApiGetAIModels>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChatBotApiGetAIModels>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetChatBotApiGetAIModelsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const getChatBotApiGetAllSessions = (
    params?: MaybeRef<GetChatBotApiGetAllSessionsParams>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return backendForAdminClient<AllChatSessionsListPaginationResponseApiResponse>(
      {url: `/ChatBotApi/GetAllSessions`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getGetChatBotApiGetAllSessionsQueryKey = (params?: MaybeRef<GetChatBotApiGetAllSessionsParams>,) => {
    return ['ChatBotApi','GetAllSessions', ...(params ? [params]: [])] as const;
    }

    
export const getGetChatBotApiGetAllSessionsQueryOptions = <TData = Awaited<ReturnType<typeof getChatBotApiGetAllSessions>>, TError = unknown>(params?: MaybeRef<GetChatBotApiGetAllSessionsParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChatBotApiGetAllSessions>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetChatBotApiGetAllSessionsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getChatBotApiGetAllSessions>>> = ({ signal }) => getChatBotApiGetAllSessions(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getChatBotApiGetAllSessions>>, TError, TData> 
}

export type GetChatBotApiGetAllSessionsQueryResult = NonNullable<Awaited<ReturnType<typeof getChatBotApiGetAllSessions>>>
export type GetChatBotApiGetAllSessionsQueryError = unknown



export function useGetChatBotApiGetAllSessions<TData = Awaited<ReturnType<typeof getChatBotApiGetAllSessions>>, TError = unknown>(
 params?: MaybeRef<GetChatBotApiGetAllSessionsParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChatBotApiGetAllSessions>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetChatBotApiGetAllSessionsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const getContentManagementApiGetAuthorById = (
    params?: MaybeRef<GetContentManagementApiGetAuthorByIdParams>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return backendForAdminClient<AuthorDto>(
      {url: `/ContentManagementApi/GetAuthorById`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getGetContentManagementApiGetAuthorByIdQueryKey = (params?: MaybeRef<GetContentManagementApiGetAuthorByIdParams>,) => {
    return ['ContentManagementApi','GetAuthorById', ...(params ? [params]: [])] as const;
    }

    
export const getGetContentManagementApiGetAuthorByIdQueryOptions = <TData = Awaited<ReturnType<typeof getContentManagementApiGetAuthorById>>, TError = ProblemDetails | void>(params?: MaybeRef<GetContentManagementApiGetAuthorByIdParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentManagementApiGetAuthorById>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetContentManagementApiGetAuthorByIdQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getContentManagementApiGetAuthorById>>> = ({ signal }) => getContentManagementApiGetAuthorById(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getContentManagementApiGetAuthorById>>, TError, TData> 
}

export type GetContentManagementApiGetAuthorByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getContentManagementApiGetAuthorById>>>
export type GetContentManagementApiGetAuthorByIdQueryError = ProblemDetails | void



export function useGetContentManagementApiGetAuthorById<TData = Awaited<ReturnType<typeof getContentManagementApiGetAuthorById>>, TError = ProblemDetails | void>(
 params?: MaybeRef<GetContentManagementApiGetAuthorByIdParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentManagementApiGetAuthorById>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetContentManagementApiGetAuthorByIdQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const getContentManagementApiGetAllAuthors = (
    
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      
      
      return backendForAdminClient<AuthorDto[]>(
      {url: `/ContentManagementApi/GetAllAuthors`, method: 'GET', signal
    },
      options);
    }
  

export const getGetContentManagementApiGetAllAuthorsQueryKey = () => {
    return ['ContentManagementApi','GetAllAuthors'] as const;
    }

    
export const getGetContentManagementApiGetAllAuthorsQueryOptions = <TData = Awaited<ReturnType<typeof getContentManagementApiGetAllAuthors>>, TError = ProblemDetails | void>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentManagementApiGetAllAuthors>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetContentManagementApiGetAllAuthorsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getContentManagementApiGetAllAuthors>>> = ({ signal }) => getContentManagementApiGetAllAuthors(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getContentManagementApiGetAllAuthors>>, TError, TData> 
}

export type GetContentManagementApiGetAllAuthorsQueryResult = NonNullable<Awaited<ReturnType<typeof getContentManagementApiGetAllAuthors>>>
export type GetContentManagementApiGetAllAuthorsQueryError = ProblemDetails | void



export function useGetContentManagementApiGetAllAuthors<TData = Awaited<ReturnType<typeof getContentManagementApiGetAllAuthors>>, TError = ProblemDetails | void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentManagementApiGetAllAuthors>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetContentManagementApiGetAllAuthorsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const postContentManagementApiCreateAuthor = (
    createAuthorRequest: MaybeRef<CreateAuthorRequest>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      createAuthorRequest = unref(createAuthorRequest);
      
      return backendForAdminClient<AuthorDto>(
      {url: `/ContentManagementApi/CreateAuthor`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createAuthorRequest, signal
    },
      options);
    }
  


export const getPostContentManagementApiCreateAuthorMutationOptions = <TError = ProblemDetails | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postContentManagementApiCreateAuthor>>, TError,{data: CreateAuthorRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof postContentManagementApiCreateAuthor>>, TError,{data: CreateAuthorRequest}, TContext> => {

const mutationKey = ['postContentManagementApiCreateAuthor'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postContentManagementApiCreateAuthor>>, {data: CreateAuthorRequest}> = (props) => {
          const {data} = props ?? {};

          return  postContentManagementApiCreateAuthor(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostContentManagementApiCreateAuthorMutationResult = NonNullable<Awaited<ReturnType<typeof postContentManagementApiCreateAuthor>>>
    export type PostContentManagementApiCreateAuthorMutationBody = CreateAuthorRequest
    export type PostContentManagementApiCreateAuthorMutationError = ProblemDetails | void

    export const usePostContentManagementApiCreateAuthor = <TError = ProblemDetails | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postContentManagementApiCreateAuthor>>, TError,{data: CreateAuthorRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof postContentManagementApiCreateAuthor>>,
        TError,
        {data: CreateAuthorRequest},
        TContext
      > => {

      const mutationOptions = getPostContentManagementApiCreateAuthorMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const putContentManagementApiUpdateAuthor = (
    updateAuthorRequest: MaybeRef<UpdateAuthorRequest>,
 options?: SecondParameter<typeof backendForAdminClient>,) => {
      updateAuthorRequest = unref(updateAuthorRequest);
      
      return backendForAdminClient<boolean>(
      {url: `/ContentManagementApi/UpdateAuthor`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateAuthorRequest
    },
      options);
    }
  


export const getPutContentManagementApiUpdateAuthorMutationOptions = <TError = ProblemDetails | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putContentManagementApiUpdateAuthor>>, TError,{data: UpdateAuthorRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof putContentManagementApiUpdateAuthor>>, TError,{data: UpdateAuthorRequest}, TContext> => {

const mutationKey = ['putContentManagementApiUpdateAuthor'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putContentManagementApiUpdateAuthor>>, {data: UpdateAuthorRequest}> = (props) => {
          const {data} = props ?? {};

          return  putContentManagementApiUpdateAuthor(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutContentManagementApiUpdateAuthorMutationResult = NonNullable<Awaited<ReturnType<typeof putContentManagementApiUpdateAuthor>>>
    export type PutContentManagementApiUpdateAuthorMutationBody = UpdateAuthorRequest
    export type PutContentManagementApiUpdateAuthorMutationError = ProblemDetails | void

    export const usePutContentManagementApiUpdateAuthor = <TError = ProblemDetails | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putContentManagementApiUpdateAuthor>>, TError,{data: UpdateAuthorRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof putContentManagementApiUpdateAuthor>>,
        TError,
        {data: UpdateAuthorRequest},
        TContext
      > => {

      const mutationOptions = getPutContentManagementApiUpdateAuthorMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const deleteContentManagementApiDeleteAuthor = (
    params?: MaybeRef<DeleteContentManagementApiDeleteAuthorParams>,
 options?: SecondParameter<typeof backendForAdminClient>,) => {
      params = unref(params);
      
      return backendForAdminClient<boolean>(
      {url: `/ContentManagementApi/DeleteAuthor`, method: 'DELETE',
        params: unref(params)
    },
      options);
    }
  


export const getDeleteContentManagementApiDeleteAuthorMutationOptions = <TError = ProblemDetails | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteContentManagementApiDeleteAuthor>>, TError,{params?: DeleteContentManagementApiDeleteAuthorParams}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteContentManagementApiDeleteAuthor>>, TError,{params?: DeleteContentManagementApiDeleteAuthorParams}, TContext> => {

const mutationKey = ['deleteContentManagementApiDeleteAuthor'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteContentManagementApiDeleteAuthor>>, {params?: DeleteContentManagementApiDeleteAuthorParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteContentManagementApiDeleteAuthor(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteContentManagementApiDeleteAuthorMutationResult = NonNullable<Awaited<ReturnType<typeof deleteContentManagementApiDeleteAuthor>>>
    
    export type DeleteContentManagementApiDeleteAuthorMutationError = ProblemDetails | void

    export const useDeleteContentManagementApiDeleteAuthor = <TError = ProblemDetails | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteContentManagementApiDeleteAuthor>>, TError,{params?: DeleteContentManagementApiDeleteAuthorParams}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof deleteContentManagementApiDeleteAuthor>>,
        TError,
        {params?: DeleteContentManagementApiDeleteAuthorParams},
        TContext
      > => {

      const mutationOptions = getDeleteContentManagementApiDeleteAuthorMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getContentManagementApiGetContentById = (
    params?: MaybeRef<GetContentManagementApiGetContentByIdParams>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return backendForAdminClient<ContentDto>(
      {url: `/ContentManagementApi/GetContentById`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getGetContentManagementApiGetContentByIdQueryKey = (params?: MaybeRef<GetContentManagementApiGetContentByIdParams>,) => {
    return ['ContentManagementApi','GetContentById', ...(params ? [params]: [])] as const;
    }

    
export const getGetContentManagementApiGetContentByIdQueryOptions = <TData = Awaited<ReturnType<typeof getContentManagementApiGetContentById>>, TError = ProblemDetails | void>(params?: MaybeRef<GetContentManagementApiGetContentByIdParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentManagementApiGetContentById>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetContentManagementApiGetContentByIdQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getContentManagementApiGetContentById>>> = ({ signal }) => getContentManagementApiGetContentById(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getContentManagementApiGetContentById>>, TError, TData> 
}

export type GetContentManagementApiGetContentByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getContentManagementApiGetContentById>>>
export type GetContentManagementApiGetContentByIdQueryError = ProblemDetails | void



export function useGetContentManagementApiGetContentById<TData = Awaited<ReturnType<typeof getContentManagementApiGetContentById>>, TError = ProblemDetails | void>(
 params?: MaybeRef<GetContentManagementApiGetContentByIdParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentManagementApiGetContentById>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetContentManagementApiGetContentByIdQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const getContentManagementApiGetAllContents = (
    
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      
      
      return backendForAdminClient<ContentDto[]>(
      {url: `/ContentManagementApi/GetAllContents`, method: 'GET', signal
    },
      options);
    }
  

export const getGetContentManagementApiGetAllContentsQueryKey = () => {
    return ['ContentManagementApi','GetAllContents'] as const;
    }

    
export const getGetContentManagementApiGetAllContentsQueryOptions = <TData = Awaited<ReturnType<typeof getContentManagementApiGetAllContents>>, TError = ProblemDetails | void>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentManagementApiGetAllContents>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetContentManagementApiGetAllContentsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getContentManagementApiGetAllContents>>> = ({ signal }) => getContentManagementApiGetAllContents(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getContentManagementApiGetAllContents>>, TError, TData> 
}

export type GetContentManagementApiGetAllContentsQueryResult = NonNullable<Awaited<ReturnType<typeof getContentManagementApiGetAllContents>>>
export type GetContentManagementApiGetAllContentsQueryError = ProblemDetails | void



export function useGetContentManagementApiGetAllContents<TData = Awaited<ReturnType<typeof getContentManagementApiGetAllContents>>, TError = ProblemDetails | void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentManagementApiGetAllContents>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetContentManagementApiGetAllContentsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const postContentManagementApiCreateContent = (
    createContentRequest: MaybeRef<CreateContentRequest>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      createContentRequest = unref(createContentRequest);
      
      return backendForAdminClient<ContentDto>(
      {url: `/ContentManagementApi/CreateContent`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createContentRequest, signal
    },
      options);
    }
  


export const getPostContentManagementApiCreateContentMutationOptions = <TError = ProblemDetails | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postContentManagementApiCreateContent>>, TError,{data: CreateContentRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof postContentManagementApiCreateContent>>, TError,{data: CreateContentRequest}, TContext> => {

const mutationKey = ['postContentManagementApiCreateContent'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postContentManagementApiCreateContent>>, {data: CreateContentRequest}> = (props) => {
          const {data} = props ?? {};

          return  postContentManagementApiCreateContent(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostContentManagementApiCreateContentMutationResult = NonNullable<Awaited<ReturnType<typeof postContentManagementApiCreateContent>>>
    export type PostContentManagementApiCreateContentMutationBody = CreateContentRequest
    export type PostContentManagementApiCreateContentMutationError = ProblemDetails | void

    export const usePostContentManagementApiCreateContent = <TError = ProblemDetails | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postContentManagementApiCreateContent>>, TError,{data: CreateContentRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof postContentManagementApiCreateContent>>,
        TError,
        {data: CreateContentRequest},
        TContext
      > => {

      const mutationOptions = getPostContentManagementApiCreateContentMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const putContentManagementApiUpdateContent = (
    updateContentRequest: MaybeRef<UpdateContentRequest>,
 options?: SecondParameter<typeof backendForAdminClient>,) => {
      updateContentRequest = unref(updateContentRequest);
      
      return backendForAdminClient<boolean>(
      {url: `/ContentManagementApi/UpdateContent`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateContentRequest
    },
      options);
    }
  


export const getPutContentManagementApiUpdateContentMutationOptions = <TError = ProblemDetails | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putContentManagementApiUpdateContent>>, TError,{data: UpdateContentRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof putContentManagementApiUpdateContent>>, TError,{data: UpdateContentRequest}, TContext> => {

const mutationKey = ['putContentManagementApiUpdateContent'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putContentManagementApiUpdateContent>>, {data: UpdateContentRequest}> = (props) => {
          const {data} = props ?? {};

          return  putContentManagementApiUpdateContent(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutContentManagementApiUpdateContentMutationResult = NonNullable<Awaited<ReturnType<typeof putContentManagementApiUpdateContent>>>
    export type PutContentManagementApiUpdateContentMutationBody = UpdateContentRequest
    export type PutContentManagementApiUpdateContentMutationError = ProblemDetails | void

    export const usePutContentManagementApiUpdateContent = <TError = ProblemDetails | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putContentManagementApiUpdateContent>>, TError,{data: UpdateContentRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof putContentManagementApiUpdateContent>>,
        TError,
        {data: UpdateContentRequest},
        TContext
      > => {

      const mutationOptions = getPutContentManagementApiUpdateContentMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const deleteContentManagementApiDeleteContent = (
    params?: MaybeRef<DeleteContentManagementApiDeleteContentParams>,
 options?: SecondParameter<typeof backendForAdminClient>,) => {
      params = unref(params);
      
      return backendForAdminClient<boolean>(
      {url: `/ContentManagementApi/DeleteContent`, method: 'DELETE',
        params: unref(params)
    },
      options);
    }
  


export const getDeleteContentManagementApiDeleteContentMutationOptions = <TError = ProblemDetails | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteContentManagementApiDeleteContent>>, TError,{params?: DeleteContentManagementApiDeleteContentParams}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteContentManagementApiDeleteContent>>, TError,{params?: DeleteContentManagementApiDeleteContentParams}, TContext> => {

const mutationKey = ['deleteContentManagementApiDeleteContent'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteContentManagementApiDeleteContent>>, {params?: DeleteContentManagementApiDeleteContentParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteContentManagementApiDeleteContent(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteContentManagementApiDeleteContentMutationResult = NonNullable<Awaited<ReturnType<typeof deleteContentManagementApiDeleteContent>>>
    
    export type DeleteContentManagementApiDeleteContentMutationError = ProblemDetails | void

    export const useDeleteContentManagementApiDeleteContent = <TError = ProblemDetails | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteContentManagementApiDeleteContent>>, TError,{params?: DeleteContentManagementApiDeleteContentParams}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof deleteContentManagementApiDeleteContent>>,
        TError,
        {params?: DeleteContentManagementApiDeleteContentParams},
        TContext
      > => {

      const mutationOptions = getDeleteContentManagementApiDeleteContentMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getContentManagementApiGetFeaturedContent = (
    params?: MaybeRef<GetContentManagementApiGetFeaturedContentParams>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return backendForAdminClient<ContentDto>(
      {url: `/ContentManagementApi/GetFeaturedContent`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getGetContentManagementApiGetFeaturedContentQueryKey = (params?: MaybeRef<GetContentManagementApiGetFeaturedContentParams>,) => {
    return ['ContentManagementApi','GetFeaturedContent', ...(params ? [params]: [])] as const;
    }

    
export const getGetContentManagementApiGetFeaturedContentQueryOptions = <TData = Awaited<ReturnType<typeof getContentManagementApiGetFeaturedContent>>, TError = ProblemDetails | void>(params?: MaybeRef<GetContentManagementApiGetFeaturedContentParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentManagementApiGetFeaturedContent>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetContentManagementApiGetFeaturedContentQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getContentManagementApiGetFeaturedContent>>> = ({ signal }) => getContentManagementApiGetFeaturedContent(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getContentManagementApiGetFeaturedContent>>, TError, TData> 
}

export type GetContentManagementApiGetFeaturedContentQueryResult = NonNullable<Awaited<ReturnType<typeof getContentManagementApiGetFeaturedContent>>>
export type GetContentManagementApiGetFeaturedContentQueryError = ProblemDetails | void



export function useGetContentManagementApiGetFeaturedContent<TData = Awaited<ReturnType<typeof getContentManagementApiGetFeaturedContent>>, TError = ProblemDetails | void>(
 params?: MaybeRef<GetContentManagementApiGetFeaturedContentParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentManagementApiGetFeaturedContent>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetContentManagementApiGetFeaturedContentQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const putContentManagementApiPublishContent = (
    params?: MaybeRef<PutContentManagementApiPublishContentParams>,
 options?: SecondParameter<typeof backendForAdminClient>,) => {
      params = unref(params);
      
      return backendForAdminClient<ContentDto>(
      {url: `/ContentManagementApi/PublishContent`, method: 'PUT',
        params: unref(params)
    },
      options);
    }
  


export const getPutContentManagementApiPublishContentMutationOptions = <TError = ProblemDetails | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putContentManagementApiPublishContent>>, TError,{params?: PutContentManagementApiPublishContentParams}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof putContentManagementApiPublishContent>>, TError,{params?: PutContentManagementApiPublishContentParams}, TContext> => {

const mutationKey = ['putContentManagementApiPublishContent'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putContentManagementApiPublishContent>>, {params?: PutContentManagementApiPublishContentParams}> = (props) => {
          const {params} = props ?? {};

          return  putContentManagementApiPublishContent(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutContentManagementApiPublishContentMutationResult = NonNullable<Awaited<ReturnType<typeof putContentManagementApiPublishContent>>>
    
    export type PutContentManagementApiPublishContentMutationError = ProblemDetails | void

    export const usePutContentManagementApiPublishContent = <TError = ProblemDetails | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putContentManagementApiPublishContent>>, TError,{params?: PutContentManagementApiPublishContentParams}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof putContentManagementApiPublishContent>>,
        TError,
        {params?: PutContentManagementApiPublishContentParams},
        TContext
      > => {

      const mutationOptions = getPutContentManagementApiPublishContentMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const putContentManagementApiUnPublishContent = (
    params?: MaybeRef<PutContentManagementApiUnPublishContentParams>,
 options?: SecondParameter<typeof backendForAdminClient>,) => {
      params = unref(params);
      
      return backendForAdminClient<ContentDto>(
      {url: `/ContentManagementApi/UnPublishContent`, method: 'PUT',
        params: unref(params)
    },
      options);
    }
  


export const getPutContentManagementApiUnPublishContentMutationOptions = <TError = ProblemDetails | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putContentManagementApiUnPublishContent>>, TError,{params?: PutContentManagementApiUnPublishContentParams}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof putContentManagementApiUnPublishContent>>, TError,{params?: PutContentManagementApiUnPublishContentParams}, TContext> => {

const mutationKey = ['putContentManagementApiUnPublishContent'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putContentManagementApiUnPublishContent>>, {params?: PutContentManagementApiUnPublishContentParams}> = (props) => {
          const {params} = props ?? {};

          return  putContentManagementApiUnPublishContent(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutContentManagementApiUnPublishContentMutationResult = NonNullable<Awaited<ReturnType<typeof putContentManagementApiUnPublishContent>>>
    
    export type PutContentManagementApiUnPublishContentMutationError = ProblemDetails | void

    export const usePutContentManagementApiUnPublishContent = <TError = ProblemDetails | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putContentManagementApiUnPublishContent>>, TError,{params?: PutContentManagementApiUnPublishContentParams}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof putContentManagementApiUnPublishContent>>,
        TError,
        {params?: PutContentManagementApiUnPublishContentParams},
        TContext
      > => {

      const mutationOptions = getPutContentManagementApiUnPublishContentMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getContentManagementApiGetContentSourceById = (
    params?: MaybeRef<GetContentManagementApiGetContentSourceByIdParams>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return backendForAdminClient<ContentSourceDto>(
      {url: `/ContentManagementApi/GetContentSourceById`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getGetContentManagementApiGetContentSourceByIdQueryKey = (params?: MaybeRef<GetContentManagementApiGetContentSourceByIdParams>,) => {
    return ['ContentManagementApi','GetContentSourceById', ...(params ? [params]: [])] as const;
    }

    
export const getGetContentManagementApiGetContentSourceByIdQueryOptions = <TData = Awaited<ReturnType<typeof getContentManagementApiGetContentSourceById>>, TError = ProblemDetails | void>(params?: MaybeRef<GetContentManagementApiGetContentSourceByIdParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentManagementApiGetContentSourceById>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetContentManagementApiGetContentSourceByIdQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getContentManagementApiGetContentSourceById>>> = ({ signal }) => getContentManagementApiGetContentSourceById(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getContentManagementApiGetContentSourceById>>, TError, TData> 
}

export type GetContentManagementApiGetContentSourceByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getContentManagementApiGetContentSourceById>>>
export type GetContentManagementApiGetContentSourceByIdQueryError = ProblemDetails | void



export function useGetContentManagementApiGetContentSourceById<TData = Awaited<ReturnType<typeof getContentManagementApiGetContentSourceById>>, TError = ProblemDetails | void>(
 params?: MaybeRef<GetContentManagementApiGetContentSourceByIdParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentManagementApiGetContentSourceById>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetContentManagementApiGetContentSourceByIdQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const getContentManagementApiGetAllContentSources = (
    
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      
      
      return backendForAdminClient<ContentSourceDto[]>(
      {url: `/ContentManagementApi/GetAllContentSources`, method: 'GET', signal
    },
      options);
    }
  

export const getGetContentManagementApiGetAllContentSourcesQueryKey = () => {
    return ['ContentManagementApi','GetAllContentSources'] as const;
    }

    
export const getGetContentManagementApiGetAllContentSourcesQueryOptions = <TData = Awaited<ReturnType<typeof getContentManagementApiGetAllContentSources>>, TError = ProblemDetails | void>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentManagementApiGetAllContentSources>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetContentManagementApiGetAllContentSourcesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getContentManagementApiGetAllContentSources>>> = ({ signal }) => getContentManagementApiGetAllContentSources(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getContentManagementApiGetAllContentSources>>, TError, TData> 
}

export type GetContentManagementApiGetAllContentSourcesQueryResult = NonNullable<Awaited<ReturnType<typeof getContentManagementApiGetAllContentSources>>>
export type GetContentManagementApiGetAllContentSourcesQueryError = ProblemDetails | void



export function useGetContentManagementApiGetAllContentSources<TData = Awaited<ReturnType<typeof getContentManagementApiGetAllContentSources>>, TError = ProblemDetails | void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentManagementApiGetAllContentSources>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetContentManagementApiGetAllContentSourcesQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const postContentManagementApiCreateContentSource = (
    createContentSourceRequest: MaybeRef<CreateContentSourceRequest>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      createContentSourceRequest = unref(createContentSourceRequest);
      
      return backendForAdminClient<ContentSourceDto>(
      {url: `/ContentManagementApi/CreateContentSource`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createContentSourceRequest, signal
    },
      options);
    }
  


export const getPostContentManagementApiCreateContentSourceMutationOptions = <TError = ProblemDetails | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postContentManagementApiCreateContentSource>>, TError,{data: CreateContentSourceRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof postContentManagementApiCreateContentSource>>, TError,{data: CreateContentSourceRequest}, TContext> => {

const mutationKey = ['postContentManagementApiCreateContentSource'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postContentManagementApiCreateContentSource>>, {data: CreateContentSourceRequest}> = (props) => {
          const {data} = props ?? {};

          return  postContentManagementApiCreateContentSource(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostContentManagementApiCreateContentSourceMutationResult = NonNullable<Awaited<ReturnType<typeof postContentManagementApiCreateContentSource>>>
    export type PostContentManagementApiCreateContentSourceMutationBody = CreateContentSourceRequest
    export type PostContentManagementApiCreateContentSourceMutationError = ProblemDetails | void

    export const usePostContentManagementApiCreateContentSource = <TError = ProblemDetails | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postContentManagementApiCreateContentSource>>, TError,{data: CreateContentSourceRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof postContentManagementApiCreateContentSource>>,
        TError,
        {data: CreateContentSourceRequest},
        TContext
      > => {

      const mutationOptions = getPostContentManagementApiCreateContentSourceMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const putContentManagementApiUpdateContentSource = (
    updateContentSourceRequest: MaybeRef<UpdateContentSourceRequest>,
 options?: SecondParameter<typeof backendForAdminClient>,) => {
      updateContentSourceRequest = unref(updateContentSourceRequest);
      
      return backendForAdminClient<boolean>(
      {url: `/ContentManagementApi/UpdateContentSource`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateContentSourceRequest
    },
      options);
    }
  


export const getPutContentManagementApiUpdateContentSourceMutationOptions = <TError = ProblemDetails | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putContentManagementApiUpdateContentSource>>, TError,{data: UpdateContentSourceRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof putContentManagementApiUpdateContentSource>>, TError,{data: UpdateContentSourceRequest}, TContext> => {

const mutationKey = ['putContentManagementApiUpdateContentSource'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putContentManagementApiUpdateContentSource>>, {data: UpdateContentSourceRequest}> = (props) => {
          const {data} = props ?? {};

          return  putContentManagementApiUpdateContentSource(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutContentManagementApiUpdateContentSourceMutationResult = NonNullable<Awaited<ReturnType<typeof putContentManagementApiUpdateContentSource>>>
    export type PutContentManagementApiUpdateContentSourceMutationBody = UpdateContentSourceRequest
    export type PutContentManagementApiUpdateContentSourceMutationError = ProblemDetails | void

    export const usePutContentManagementApiUpdateContentSource = <TError = ProblemDetails | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putContentManagementApiUpdateContentSource>>, TError,{data: UpdateContentSourceRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof putContentManagementApiUpdateContentSource>>,
        TError,
        {data: UpdateContentSourceRequest},
        TContext
      > => {

      const mutationOptions = getPutContentManagementApiUpdateContentSourceMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const deleteContentManagementApiDeleteContentSource = (
    params?: MaybeRef<DeleteContentManagementApiDeleteContentSourceParams>,
 options?: SecondParameter<typeof backendForAdminClient>,) => {
      params = unref(params);
      
      return backendForAdminClient<boolean>(
      {url: `/ContentManagementApi/DeleteContentSource`, method: 'DELETE',
        params: unref(params)
    },
      options);
    }
  


export const getDeleteContentManagementApiDeleteContentSourceMutationOptions = <TError = ProblemDetails | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteContentManagementApiDeleteContentSource>>, TError,{params?: DeleteContentManagementApiDeleteContentSourceParams}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteContentManagementApiDeleteContentSource>>, TError,{params?: DeleteContentManagementApiDeleteContentSourceParams}, TContext> => {

const mutationKey = ['deleteContentManagementApiDeleteContentSource'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteContentManagementApiDeleteContentSource>>, {params?: DeleteContentManagementApiDeleteContentSourceParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteContentManagementApiDeleteContentSource(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteContentManagementApiDeleteContentSourceMutationResult = NonNullable<Awaited<ReturnType<typeof deleteContentManagementApiDeleteContentSource>>>
    
    export type DeleteContentManagementApiDeleteContentSourceMutationError = ProblemDetails | void

    export const useDeleteContentManagementApiDeleteContentSource = <TError = ProblemDetails | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteContentManagementApiDeleteContentSource>>, TError,{params?: DeleteContentManagementApiDeleteContentSourceParams}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof deleteContentManagementApiDeleteContentSource>>,
        TError,
        {params?: DeleteContentManagementApiDeleteContentSourceParams},
        TContext
      > => {

      const mutationOptions = getDeleteContentManagementApiDeleteContentSourceMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getContentManagementApiGetTagById = (
    params?: MaybeRef<GetContentManagementApiGetTagByIdParams>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return backendForAdminClient<TagDto>(
      {url: `/ContentManagementApi/GetTagById`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getGetContentManagementApiGetTagByIdQueryKey = (params?: MaybeRef<GetContentManagementApiGetTagByIdParams>,) => {
    return ['ContentManagementApi','GetTagById', ...(params ? [params]: [])] as const;
    }

    
export const getGetContentManagementApiGetTagByIdQueryOptions = <TData = Awaited<ReturnType<typeof getContentManagementApiGetTagById>>, TError = ProblemDetails | void>(params?: MaybeRef<GetContentManagementApiGetTagByIdParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentManagementApiGetTagById>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetContentManagementApiGetTagByIdQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getContentManagementApiGetTagById>>> = ({ signal }) => getContentManagementApiGetTagById(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getContentManagementApiGetTagById>>, TError, TData> 
}

export type GetContentManagementApiGetTagByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getContentManagementApiGetTagById>>>
export type GetContentManagementApiGetTagByIdQueryError = ProblemDetails | void



export function useGetContentManagementApiGetTagById<TData = Awaited<ReturnType<typeof getContentManagementApiGetTagById>>, TError = ProblemDetails | void>(
 params?: MaybeRef<GetContentManagementApiGetTagByIdParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentManagementApiGetTagById>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetContentManagementApiGetTagByIdQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const getContentManagementApiGetAllTags = (
    
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      
      
      return backendForAdminClient<TagDto[]>(
      {url: `/ContentManagementApi/GetAllTags`, method: 'GET', signal
    },
      options);
    }
  

export const getGetContentManagementApiGetAllTagsQueryKey = () => {
    return ['ContentManagementApi','GetAllTags'] as const;
    }

    
export const getGetContentManagementApiGetAllTagsQueryOptions = <TData = Awaited<ReturnType<typeof getContentManagementApiGetAllTags>>, TError = ProblemDetails | void>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentManagementApiGetAllTags>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetContentManagementApiGetAllTagsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getContentManagementApiGetAllTags>>> = ({ signal }) => getContentManagementApiGetAllTags(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getContentManagementApiGetAllTags>>, TError, TData> 
}

export type GetContentManagementApiGetAllTagsQueryResult = NonNullable<Awaited<ReturnType<typeof getContentManagementApiGetAllTags>>>
export type GetContentManagementApiGetAllTagsQueryError = ProblemDetails | void



export function useGetContentManagementApiGetAllTags<TData = Awaited<ReturnType<typeof getContentManagementApiGetAllTags>>, TError = ProblemDetails | void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentManagementApiGetAllTags>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetContentManagementApiGetAllTagsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const postContentManagementApiCreateTag = (
    createTagRequest: MaybeRef<CreateTagRequest>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      createTagRequest = unref(createTagRequest);
      
      return backendForAdminClient<TagDto>(
      {url: `/ContentManagementApi/CreateTag`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createTagRequest, signal
    },
      options);
    }
  


export const getPostContentManagementApiCreateTagMutationOptions = <TError = ProblemDetails | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postContentManagementApiCreateTag>>, TError,{data: CreateTagRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof postContentManagementApiCreateTag>>, TError,{data: CreateTagRequest}, TContext> => {

const mutationKey = ['postContentManagementApiCreateTag'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postContentManagementApiCreateTag>>, {data: CreateTagRequest}> = (props) => {
          const {data} = props ?? {};

          return  postContentManagementApiCreateTag(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostContentManagementApiCreateTagMutationResult = NonNullable<Awaited<ReturnType<typeof postContentManagementApiCreateTag>>>
    export type PostContentManagementApiCreateTagMutationBody = CreateTagRequest
    export type PostContentManagementApiCreateTagMutationError = ProblemDetails | void

    export const usePostContentManagementApiCreateTag = <TError = ProblemDetails | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postContentManagementApiCreateTag>>, TError,{data: CreateTagRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof postContentManagementApiCreateTag>>,
        TError,
        {data: CreateTagRequest},
        TContext
      > => {

      const mutationOptions = getPostContentManagementApiCreateTagMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const putContentManagementApiUpdateTag = (
    updateTagRequest: MaybeRef<UpdateTagRequest>,
 options?: SecondParameter<typeof backendForAdminClient>,) => {
      updateTagRequest = unref(updateTagRequest);
      
      return backendForAdminClient<boolean>(
      {url: `/ContentManagementApi/UpdateTag`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateTagRequest
    },
      options);
    }
  


export const getPutContentManagementApiUpdateTagMutationOptions = <TError = ProblemDetails | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putContentManagementApiUpdateTag>>, TError,{data: UpdateTagRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof putContentManagementApiUpdateTag>>, TError,{data: UpdateTagRequest}, TContext> => {

const mutationKey = ['putContentManagementApiUpdateTag'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putContentManagementApiUpdateTag>>, {data: UpdateTagRequest}> = (props) => {
          const {data} = props ?? {};

          return  putContentManagementApiUpdateTag(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutContentManagementApiUpdateTagMutationResult = NonNullable<Awaited<ReturnType<typeof putContentManagementApiUpdateTag>>>
    export type PutContentManagementApiUpdateTagMutationBody = UpdateTagRequest
    export type PutContentManagementApiUpdateTagMutationError = ProblemDetails | void

    export const usePutContentManagementApiUpdateTag = <TError = ProblemDetails | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putContentManagementApiUpdateTag>>, TError,{data: UpdateTagRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof putContentManagementApiUpdateTag>>,
        TError,
        {data: UpdateTagRequest},
        TContext
      > => {

      const mutationOptions = getPutContentManagementApiUpdateTagMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const deleteContentManagementApiDeleteTag = (
    params?: MaybeRef<DeleteContentManagementApiDeleteTagParams>,
 options?: SecondParameter<typeof backendForAdminClient>,) => {
      params = unref(params);
      
      return backendForAdminClient<boolean>(
      {url: `/ContentManagementApi/DeleteTag`, method: 'DELETE',
        params: unref(params)
    },
      options);
    }
  


export const getDeleteContentManagementApiDeleteTagMutationOptions = <TError = ProblemDetails | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteContentManagementApiDeleteTag>>, TError,{params?: DeleteContentManagementApiDeleteTagParams}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteContentManagementApiDeleteTag>>, TError,{params?: DeleteContentManagementApiDeleteTagParams}, TContext> => {

const mutationKey = ['deleteContentManagementApiDeleteTag'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteContentManagementApiDeleteTag>>, {params?: DeleteContentManagementApiDeleteTagParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteContentManagementApiDeleteTag(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteContentManagementApiDeleteTagMutationResult = NonNullable<Awaited<ReturnType<typeof deleteContentManagementApiDeleteTag>>>
    
    export type DeleteContentManagementApiDeleteTagMutationError = ProblemDetails | void

    export const useDeleteContentManagementApiDeleteTag = <TError = ProblemDetails | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteContentManagementApiDeleteTag>>, TError,{params?: DeleteContentManagementApiDeleteTagParams}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof deleteContentManagementApiDeleteTag>>,
        TError,
        {params?: DeleteContentManagementApiDeleteTagParams},
        TContext
      > => {

      const mutationOptions = getDeleteContentManagementApiDeleteTagMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getContentManagementApiGetTagsByNames = (
    getContentManagementApiGetTagsByNamesBody: MaybeRef<string[]>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      getContentManagementApiGetTagsByNamesBody = unref(getContentManagementApiGetTagsByNamesBody);
      
      return backendForAdminClient<TagDto[]>(
      {url: `/ContentManagementApi/GetTagsByNames`, method: 'GET',
      headers: {'Content-Type': 'application/json', }, signal
    },
      options);
    }
  

export const getGetContentManagementApiGetTagsByNamesQueryKey = (getContentManagementApiGetTagsByNamesBody: MaybeRef<string[]>,) => {
    return ['ContentManagementApi','GetTagsByNames', getContentManagementApiGetTagsByNamesBody] as const;
    }

    
export const getGetContentManagementApiGetTagsByNamesQueryOptions = <TData = Awaited<ReturnType<typeof getContentManagementApiGetTagsByNames>>, TError = ProblemDetails | void>(getContentManagementApiGetTagsByNamesBody: MaybeRef<string[]>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentManagementApiGetTagsByNames>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetContentManagementApiGetTagsByNamesQueryKey(getContentManagementApiGetTagsByNamesBody);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getContentManagementApiGetTagsByNames>>> = ({ signal }) => getContentManagementApiGetTagsByNames(getContentManagementApiGetTagsByNamesBody, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getContentManagementApiGetTagsByNames>>, TError, TData> 
}

export type GetContentManagementApiGetTagsByNamesQueryResult = NonNullable<Awaited<ReturnType<typeof getContentManagementApiGetTagsByNames>>>
export type GetContentManagementApiGetTagsByNamesQueryError = ProblemDetails | void



export function useGetContentManagementApiGetTagsByNames<TData = Awaited<ReturnType<typeof getContentManagementApiGetTagsByNames>>, TError = ProblemDetails | void>(
 getContentManagementApiGetTagsByNamesBody: MaybeRef<string[]>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentManagementApiGetTagsByNames>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetContentManagementApiGetTagsByNamesQueryOptions(getContentManagementApiGetTagsByNamesBody,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const postNotificationApiUpdateEmailSettings = (
    emailSettingsDto: MaybeRef<EmailSettingsDto>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      emailSettingsDto = unref(emailSettingsDto);
      
      return backendForAdminClient<BooleanApiResponse>(
      {url: `/NotificationApi/UpdateEmailSettings`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: emailSettingsDto, signal
    },
      options);
    }
  


export const getPostNotificationApiUpdateEmailSettingsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postNotificationApiUpdateEmailSettings>>, TError,{data: EmailSettingsDto}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof postNotificationApiUpdateEmailSettings>>, TError,{data: EmailSettingsDto}, TContext> => {

const mutationKey = ['postNotificationApiUpdateEmailSettings'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postNotificationApiUpdateEmailSettings>>, {data: EmailSettingsDto}> = (props) => {
          const {data} = props ?? {};

          return  postNotificationApiUpdateEmailSettings(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostNotificationApiUpdateEmailSettingsMutationResult = NonNullable<Awaited<ReturnType<typeof postNotificationApiUpdateEmailSettings>>>
    export type PostNotificationApiUpdateEmailSettingsMutationBody = EmailSettingsDto
    export type PostNotificationApiUpdateEmailSettingsMutationError = unknown

    export const usePostNotificationApiUpdateEmailSettings = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postNotificationApiUpdateEmailSettings>>, TError,{data: EmailSettingsDto}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof postNotificationApiUpdateEmailSettings>>,
        TError,
        {data: EmailSettingsDto},
        TContext
      > => {

      const mutationOptions = getPostNotificationApiUpdateEmailSettingsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getNotificationApiGetEmailSettings = (
    params?: MaybeRef<GetNotificationApiGetEmailSettingsParams>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return backendForAdminClient<EmailSettingsDtoApiResponse>(
      {url: `/NotificationApi/GetEmailSettings`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getGetNotificationApiGetEmailSettingsQueryKey = (params?: MaybeRef<GetNotificationApiGetEmailSettingsParams>,) => {
    return ['NotificationApi','GetEmailSettings', ...(params ? [params]: [])] as const;
    }

    
export const getGetNotificationApiGetEmailSettingsQueryOptions = <TData = Awaited<ReturnType<typeof getNotificationApiGetEmailSettings>>, TError = unknown>(params?: MaybeRef<GetNotificationApiGetEmailSettingsParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationApiGetEmailSettings>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetNotificationApiGetEmailSettingsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNotificationApiGetEmailSettings>>> = ({ signal }) => getNotificationApiGetEmailSettings(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNotificationApiGetEmailSettings>>, TError, TData> 
}

export type GetNotificationApiGetEmailSettingsQueryResult = NonNullable<Awaited<ReturnType<typeof getNotificationApiGetEmailSettings>>>
export type GetNotificationApiGetEmailSettingsQueryError = unknown



export function useGetNotificationApiGetEmailSettings<TData = Awaited<ReturnType<typeof getNotificationApiGetEmailSettings>>, TError = unknown>(
 params?: MaybeRef<GetNotificationApiGetEmailSettingsParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationApiGetEmailSettings>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetNotificationApiGetEmailSettingsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const getNotificationApiGetTemplate = (
    params?: MaybeRef<GetNotificationApiGetTemplateParams>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return backendForAdminClient<MessageTemplateDto>(
      {url: `/NotificationApi/GetTemplate`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getGetNotificationApiGetTemplateQueryKey = (params?: MaybeRef<GetNotificationApiGetTemplateParams>,) => {
    return ['NotificationApi','GetTemplate', ...(params ? [params]: [])] as const;
    }

    
export const getGetNotificationApiGetTemplateQueryOptions = <TData = Awaited<ReturnType<typeof getNotificationApiGetTemplate>>, TError = ProblemDetails | void>(params?: MaybeRef<GetNotificationApiGetTemplateParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationApiGetTemplate>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetNotificationApiGetTemplateQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNotificationApiGetTemplate>>> = ({ signal }) => getNotificationApiGetTemplate(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNotificationApiGetTemplate>>, TError, TData> 
}

export type GetNotificationApiGetTemplateQueryResult = NonNullable<Awaited<ReturnType<typeof getNotificationApiGetTemplate>>>
export type GetNotificationApiGetTemplateQueryError = ProblemDetails | void



export function useGetNotificationApiGetTemplate<TData = Awaited<ReturnType<typeof getNotificationApiGetTemplate>>, TError = ProblemDetails | void>(
 params?: MaybeRef<GetNotificationApiGetTemplateParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationApiGetTemplate>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetNotificationApiGetTemplateQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const getNotificationApiGetAllTemplates = (
    
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      
      
      return backendForAdminClient<MessageTemplateDto[]>(
      {url: `/NotificationApi/GetAllTemplates`, method: 'GET', signal
    },
      options);
    }
  

export const getGetNotificationApiGetAllTemplatesQueryKey = () => {
    return ['NotificationApi','GetAllTemplates'] as const;
    }

    
export const getGetNotificationApiGetAllTemplatesQueryOptions = <TData = Awaited<ReturnType<typeof getNotificationApiGetAllTemplates>>, TError = ProblemDetails | void>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationApiGetAllTemplates>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetNotificationApiGetAllTemplatesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNotificationApiGetAllTemplates>>> = ({ signal }) => getNotificationApiGetAllTemplates(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNotificationApiGetAllTemplates>>, TError, TData> 
}

export type GetNotificationApiGetAllTemplatesQueryResult = NonNullable<Awaited<ReturnType<typeof getNotificationApiGetAllTemplates>>>
export type GetNotificationApiGetAllTemplatesQueryError = ProblemDetails | void



export function useGetNotificationApiGetAllTemplates<TData = Awaited<ReturnType<typeof getNotificationApiGetAllTemplates>>, TError = ProblemDetails | void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationApiGetAllTemplates>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetNotificationApiGetAllTemplatesQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const postNotificationApiRenderTemplate = (
    renderMessageTemplateRequest: MaybeRef<RenderMessageTemplateRequest>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      renderMessageTemplateRequest = unref(renderMessageTemplateRequest);
      
      return backendForAdminClient<MessageTemplateDto>(
      {url: `/NotificationApi/RenderTemplate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: renderMessageTemplateRequest, signal
    },
      options);
    }
  


export const getPostNotificationApiRenderTemplateMutationOptions = <TError = ProblemDetails | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postNotificationApiRenderTemplate>>, TError,{data: RenderMessageTemplateRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof postNotificationApiRenderTemplate>>, TError,{data: RenderMessageTemplateRequest}, TContext> => {

const mutationKey = ['postNotificationApiRenderTemplate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postNotificationApiRenderTemplate>>, {data: RenderMessageTemplateRequest}> = (props) => {
          const {data} = props ?? {};

          return  postNotificationApiRenderTemplate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostNotificationApiRenderTemplateMutationResult = NonNullable<Awaited<ReturnType<typeof postNotificationApiRenderTemplate>>>
    export type PostNotificationApiRenderTemplateMutationBody = RenderMessageTemplateRequest
    export type PostNotificationApiRenderTemplateMutationError = ProblemDetails | void

    export const usePostNotificationApiRenderTemplate = <TError = ProblemDetails | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postNotificationApiRenderTemplate>>, TError,{data: RenderMessageTemplateRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof postNotificationApiRenderTemplate>>,
        TError,
        {data: RenderMessageTemplateRequest},
        TContext
      > => {

      const mutationOptions = getPostNotificationApiRenderTemplateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const postNotificationApiCreateTemplate = (
    createMessageTemplateRequest: MaybeRef<CreateMessageTemplateRequest>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      createMessageTemplateRequest = unref(createMessageTemplateRequest);
      
      return backendForAdminClient<MessageTemplateDto>(
      {url: `/NotificationApi/CreateTemplate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createMessageTemplateRequest, signal
    },
      options);
    }
  


export const getPostNotificationApiCreateTemplateMutationOptions = <TError = ProblemDetails | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postNotificationApiCreateTemplate>>, TError,{data: CreateMessageTemplateRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof postNotificationApiCreateTemplate>>, TError,{data: CreateMessageTemplateRequest}, TContext> => {

const mutationKey = ['postNotificationApiCreateTemplate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postNotificationApiCreateTemplate>>, {data: CreateMessageTemplateRequest}> = (props) => {
          const {data} = props ?? {};

          return  postNotificationApiCreateTemplate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostNotificationApiCreateTemplateMutationResult = NonNullable<Awaited<ReturnType<typeof postNotificationApiCreateTemplate>>>
    export type PostNotificationApiCreateTemplateMutationBody = CreateMessageTemplateRequest
    export type PostNotificationApiCreateTemplateMutationError = ProblemDetails | void

    export const usePostNotificationApiCreateTemplate = <TError = ProblemDetails | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postNotificationApiCreateTemplate>>, TError,{data: CreateMessageTemplateRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof postNotificationApiCreateTemplate>>,
        TError,
        {data: CreateMessageTemplateRequest},
        TContext
      > => {

      const mutationOptions = getPostNotificationApiCreateTemplateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const putNotificationApiUpdateTemplate = (
    updateMessageTemplateRequest: MaybeRef<UpdateMessageTemplateRequest>,
 options?: SecondParameter<typeof backendForAdminClient>,) => {
      updateMessageTemplateRequest = unref(updateMessageTemplateRequest);
      
      return backendForAdminClient<boolean>(
      {url: `/NotificationApi/UpdateTemplate`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateMessageTemplateRequest
    },
      options);
    }
  


export const getPutNotificationApiUpdateTemplateMutationOptions = <TError = ProblemDetails | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putNotificationApiUpdateTemplate>>, TError,{data: UpdateMessageTemplateRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof putNotificationApiUpdateTemplate>>, TError,{data: UpdateMessageTemplateRequest}, TContext> => {

const mutationKey = ['putNotificationApiUpdateTemplate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putNotificationApiUpdateTemplate>>, {data: UpdateMessageTemplateRequest}> = (props) => {
          const {data} = props ?? {};

          return  putNotificationApiUpdateTemplate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutNotificationApiUpdateTemplateMutationResult = NonNullable<Awaited<ReturnType<typeof putNotificationApiUpdateTemplate>>>
    export type PutNotificationApiUpdateTemplateMutationBody = UpdateMessageTemplateRequest
    export type PutNotificationApiUpdateTemplateMutationError = ProblemDetails | void

    export const usePutNotificationApiUpdateTemplate = <TError = ProblemDetails | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putNotificationApiUpdateTemplate>>, TError,{data: UpdateMessageTemplateRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof putNotificationApiUpdateTemplate>>,
        TError,
        {data: UpdateMessageTemplateRequest},
        TContext
      > => {

      const mutationOptions = getPutNotificationApiUpdateTemplateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const deleteNotificationApiDeleteTemplate = (
    params?: MaybeRef<DeleteNotificationApiDeleteTemplateParams>,
 options?: SecondParameter<typeof backendForAdminClient>,) => {
      params = unref(params);
      
      return backendForAdminClient<boolean>(
      {url: `/NotificationApi/DeleteTemplate`, method: 'DELETE',
        params: unref(params)
    },
      options);
    }
  


export const getDeleteNotificationApiDeleteTemplateMutationOptions = <TError = ProblemDetails | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteNotificationApiDeleteTemplate>>, TError,{params?: DeleteNotificationApiDeleteTemplateParams}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteNotificationApiDeleteTemplate>>, TError,{params?: DeleteNotificationApiDeleteTemplateParams}, TContext> => {

const mutationKey = ['deleteNotificationApiDeleteTemplate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteNotificationApiDeleteTemplate>>, {params?: DeleteNotificationApiDeleteTemplateParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteNotificationApiDeleteTemplate(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteNotificationApiDeleteTemplateMutationResult = NonNullable<Awaited<ReturnType<typeof deleteNotificationApiDeleteTemplate>>>
    
    export type DeleteNotificationApiDeleteTemplateMutationError = ProblemDetails | void

    export const useDeleteNotificationApiDeleteTemplate = <TError = ProblemDetails | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteNotificationApiDeleteTemplate>>, TError,{params?: DeleteNotificationApiDeleteTemplateParams}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof deleteNotificationApiDeleteTemplate>>,
        TError,
        {params?: DeleteNotificationApiDeleteTemplateParams},
        TContext
      > => {

      const mutationOptions = getDeleteNotificationApiDeleteTemplateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getNotificationApiGetProjectTemplateCount = (
    
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      
      
      return backendForAdminClient<Int32ApiResponse>(
      {url: `/NotificationApi/GetProjectTemplateCount`, method: 'GET', signal
    },
      options);
    }
  

export const getGetNotificationApiGetProjectTemplateCountQueryKey = () => {
    return ['NotificationApi','GetProjectTemplateCount'] as const;
    }

    
export const getGetNotificationApiGetProjectTemplateCountQueryOptions = <TData = Awaited<ReturnType<typeof getNotificationApiGetProjectTemplateCount>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationApiGetProjectTemplateCount>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetNotificationApiGetProjectTemplateCountQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNotificationApiGetProjectTemplateCount>>> = ({ signal }) => getNotificationApiGetProjectTemplateCount(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNotificationApiGetProjectTemplateCount>>, TError, TData> 
}

export type GetNotificationApiGetProjectTemplateCountQueryResult = NonNullable<Awaited<ReturnType<typeof getNotificationApiGetProjectTemplateCount>>>
export type GetNotificationApiGetProjectTemplateCountQueryError = unknown



export function useGetNotificationApiGetProjectTemplateCount<TData = Awaited<ReturnType<typeof getNotificationApiGetProjectTemplateCount>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationApiGetProjectTemplateCount>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetNotificationApiGetProjectTemplateCountQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const getNotificationApiGetNotificationRecordsByPagination = (
    params?: MaybeRef<GetNotificationApiGetNotificationRecordsByPaginationParams>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return backendForAdminClient<NotificationRecordDtoListPaginationResponseApiResponse>(
      {url: `/NotificationApi/GetNotificationRecordsByPagination`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getGetNotificationApiGetNotificationRecordsByPaginationQueryKey = (params?: MaybeRef<GetNotificationApiGetNotificationRecordsByPaginationParams>,) => {
    return ['NotificationApi','GetNotificationRecordsByPagination', ...(params ? [params]: [])] as const;
    }

    
export const getGetNotificationApiGetNotificationRecordsByPaginationQueryOptions = <TData = Awaited<ReturnType<typeof getNotificationApiGetNotificationRecordsByPagination>>, TError = unknown>(params?: MaybeRef<GetNotificationApiGetNotificationRecordsByPaginationParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationApiGetNotificationRecordsByPagination>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetNotificationApiGetNotificationRecordsByPaginationQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNotificationApiGetNotificationRecordsByPagination>>> = ({ signal }) => getNotificationApiGetNotificationRecordsByPagination(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNotificationApiGetNotificationRecordsByPagination>>, TError, TData> 
}

export type GetNotificationApiGetNotificationRecordsByPaginationQueryResult = NonNullable<Awaited<ReturnType<typeof getNotificationApiGetNotificationRecordsByPagination>>>
export type GetNotificationApiGetNotificationRecordsByPaginationQueryError = unknown



export function useGetNotificationApiGetNotificationRecordsByPagination<TData = Awaited<ReturnType<typeof getNotificationApiGetNotificationRecordsByPagination>>, TError = unknown>(
 params?: MaybeRef<GetNotificationApiGetNotificationRecordsByPaginationParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationApiGetNotificationRecordsByPagination>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetNotificationApiGetNotificationRecordsByPaginationQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const getNotificationApiGetProjectNotificationRecordCount = (
    
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      
      
      return backendForAdminClient<Int32ApiResponse>(
      {url: `/NotificationApi/GetProjectNotificationRecordCount`, method: 'GET', signal
    },
      options);
    }
  

export const getGetNotificationApiGetProjectNotificationRecordCountQueryKey = () => {
    return ['NotificationApi','GetProjectNotificationRecordCount'] as const;
    }

    
export const getGetNotificationApiGetProjectNotificationRecordCountQueryOptions = <TData = Awaited<ReturnType<typeof getNotificationApiGetProjectNotificationRecordCount>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationApiGetProjectNotificationRecordCount>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetNotificationApiGetProjectNotificationRecordCountQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNotificationApiGetProjectNotificationRecordCount>>> = ({ signal }) => getNotificationApiGetProjectNotificationRecordCount(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNotificationApiGetProjectNotificationRecordCount>>, TError, TData> 
}

export type GetNotificationApiGetProjectNotificationRecordCountQueryResult = NonNullable<Awaited<ReturnType<typeof getNotificationApiGetProjectNotificationRecordCount>>>
export type GetNotificationApiGetProjectNotificationRecordCountQueryError = unknown



export function useGetNotificationApiGetProjectNotificationRecordCount<TData = Awaited<ReturnType<typeof getNotificationApiGetProjectNotificationRecordCount>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationApiGetProjectNotificationRecordCount>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetNotificationApiGetProjectNotificationRecordCountQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const postNotificationApiSendEmail = (
    emailMessageEvent: MaybeRef<EmailMessageEvent>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      emailMessageEvent = unref(emailMessageEvent);
      
      return backendForAdminClient<BooleanApiResponse>(
      {url: `/NotificationApi/SendEmail`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: emailMessageEvent, signal
    },
      options);
    }
  


export const getPostNotificationApiSendEmailMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postNotificationApiSendEmail>>, TError,{data: EmailMessageEvent}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof postNotificationApiSendEmail>>, TError,{data: EmailMessageEvent}, TContext> => {

const mutationKey = ['postNotificationApiSendEmail'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postNotificationApiSendEmail>>, {data: EmailMessageEvent}> = (props) => {
          const {data} = props ?? {};

          return  postNotificationApiSendEmail(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostNotificationApiSendEmailMutationResult = NonNullable<Awaited<ReturnType<typeof postNotificationApiSendEmail>>>
    export type PostNotificationApiSendEmailMutationBody = EmailMessageEvent
    export type PostNotificationApiSendEmailMutationError = unknown

    export const usePostNotificationApiSendEmail = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postNotificationApiSendEmail>>, TError,{data: EmailMessageEvent}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof postNotificationApiSendEmail>>,
        TError,
        {data: EmailMessageEvent},
        TContext
      > => {

      const mutationOptions = getPostNotificationApiSendEmailMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const postNotificationApiSendPushNotification = (
    sendTestPushNotificationRequest: MaybeRef<SendTestPushNotificationRequest>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      sendTestPushNotificationRequest = unref(sendTestPushNotificationRequest);
      
      return backendForAdminClient<BooleanApiResponse>(
      {url: `/NotificationApi/SendPushNotification`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: sendTestPushNotificationRequest, signal
    },
      options);
    }
  


export const getPostNotificationApiSendPushNotificationMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postNotificationApiSendPushNotification>>, TError,{data: SendTestPushNotificationRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof postNotificationApiSendPushNotification>>, TError,{data: SendTestPushNotificationRequest}, TContext> => {

const mutationKey = ['postNotificationApiSendPushNotification'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postNotificationApiSendPushNotification>>, {data: SendTestPushNotificationRequest}> = (props) => {
          const {data} = props ?? {};

          return  postNotificationApiSendPushNotification(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostNotificationApiSendPushNotificationMutationResult = NonNullable<Awaited<ReturnType<typeof postNotificationApiSendPushNotification>>>
    export type PostNotificationApiSendPushNotificationMutationBody = SendTestPushNotificationRequest
    export type PostNotificationApiSendPushNotificationMutationError = ProblemDetails

    export const usePostNotificationApiSendPushNotification = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postNotificationApiSendPushNotification>>, TError,{data: SendTestPushNotificationRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof postNotificationApiSendPushNotification>>,
        TError,
        {data: SendTestPushNotificationRequest},
        TContext
      > => {

      const mutationOptions = getPostNotificationApiSendPushNotificationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const postNotificationApiSendSms = (
    sendTestSmsRequest: MaybeRef<SendTestSmsRequest>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      sendTestSmsRequest = unref(sendTestSmsRequest);
      
      return backendForAdminClient<BooleanApiResponse>(
      {url: `/NotificationApi/SendSms`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: sendTestSmsRequest, signal
    },
      options);
    }
  


export const getPostNotificationApiSendSmsMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postNotificationApiSendSms>>, TError,{data: SendTestSmsRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof postNotificationApiSendSms>>, TError,{data: SendTestSmsRequest}, TContext> => {

const mutationKey = ['postNotificationApiSendSms'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postNotificationApiSendSms>>, {data: SendTestSmsRequest}> = (props) => {
          const {data} = props ?? {};

          return  postNotificationApiSendSms(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostNotificationApiSendSmsMutationResult = NonNullable<Awaited<ReturnType<typeof postNotificationApiSendSms>>>
    export type PostNotificationApiSendSmsMutationBody = SendTestSmsRequest
    export type PostNotificationApiSendSmsMutationError = ProblemDetails

    export const usePostNotificationApiSendSms = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postNotificationApiSendSms>>, TError,{data: SendTestSmsRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof postNotificationApiSendSms>>,
        TError,
        {data: SendTestSmsRequest},
        TContext
      > => {

      const mutationOptions = getPostNotificationApiSendSmsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getNotificationApiSendOtp = (
    params?: MaybeRef<GetNotificationApiSendOtpParams>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return backendForAdminClient<StringApiResponse>(
      {url: `/NotificationApi/SendOtp`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getGetNotificationApiSendOtpQueryKey = (params?: MaybeRef<GetNotificationApiSendOtpParams>,) => {
    return ['NotificationApi','SendOtp', ...(params ? [params]: [])] as const;
    }

    
export const getGetNotificationApiSendOtpQueryOptions = <TData = Awaited<ReturnType<typeof getNotificationApiSendOtp>>, TError = ProblemDetails>(params?: MaybeRef<GetNotificationApiSendOtpParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationApiSendOtp>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetNotificationApiSendOtpQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNotificationApiSendOtp>>> = ({ signal }) => getNotificationApiSendOtp(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNotificationApiSendOtp>>, TError, TData> 
}

export type GetNotificationApiSendOtpQueryResult = NonNullable<Awaited<ReturnType<typeof getNotificationApiSendOtp>>>
export type GetNotificationApiSendOtpQueryError = ProblemDetails



export function useGetNotificationApiSendOtp<TData = Awaited<ReturnType<typeof getNotificationApiSendOtp>>, TError = ProblemDetails>(
 params?: MaybeRef<GetNotificationApiSendOtpParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationApiSendOtp>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetNotificationApiSendOtpQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const getNotificationApiVerifyOtp = (
    params?: MaybeRef<GetNotificationApiVerifyOtpParams>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return backendForAdminClient<StringApiResponse>(
      {url: `/NotificationApi/VerifyOtp`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getGetNotificationApiVerifyOtpQueryKey = (params?: MaybeRef<GetNotificationApiVerifyOtpParams>,) => {
    return ['NotificationApi','VerifyOtp', ...(params ? [params]: [])] as const;
    }

    
export const getGetNotificationApiVerifyOtpQueryOptions = <TData = Awaited<ReturnType<typeof getNotificationApiVerifyOtp>>, TError = ProblemDetails>(params?: MaybeRef<GetNotificationApiVerifyOtpParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationApiVerifyOtp>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetNotificationApiVerifyOtpQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNotificationApiVerifyOtp>>> = ({ signal }) => getNotificationApiVerifyOtp(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNotificationApiVerifyOtp>>, TError, TData> 
}

export type GetNotificationApiVerifyOtpQueryResult = NonNullable<Awaited<ReturnType<typeof getNotificationApiVerifyOtp>>>
export type GetNotificationApiVerifyOtpQueryError = ProblemDetails



export function useGetNotificationApiVerifyOtp<TData = Awaited<ReturnType<typeof getNotificationApiVerifyOtp>>, TError = ProblemDetails>(
 params?: MaybeRef<GetNotificationApiVerifyOtpParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationApiVerifyOtp>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetNotificationApiVerifyOtpQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const postNotificationApiSendTelegramMessage = (
    telegramMessageEvent: MaybeRef<TelegramMessageEvent>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      telegramMessageEvent = unref(telegramMessageEvent);
      
      return backendForAdminClient<BooleanApiResponse>(
      {url: `/NotificationApi/SendTelegramMessage`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: telegramMessageEvent, signal
    },
      options);
    }
  


export const getPostNotificationApiSendTelegramMessageMutationOptions = <TError = BooleanApiResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postNotificationApiSendTelegramMessage>>, TError,{data: TelegramMessageEvent}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof postNotificationApiSendTelegramMessage>>, TError,{data: TelegramMessageEvent}, TContext> => {

const mutationKey = ['postNotificationApiSendTelegramMessage'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postNotificationApiSendTelegramMessage>>, {data: TelegramMessageEvent}> = (props) => {
          const {data} = props ?? {};

          return  postNotificationApiSendTelegramMessage(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostNotificationApiSendTelegramMessageMutationResult = NonNullable<Awaited<ReturnType<typeof postNotificationApiSendTelegramMessage>>>
    export type PostNotificationApiSendTelegramMessageMutationBody = TelegramMessageEvent
    export type PostNotificationApiSendTelegramMessageMutationError = BooleanApiResponse

    export const usePostNotificationApiSendTelegramMessage = <TError = BooleanApiResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postNotificationApiSendTelegramMessage>>, TError,{data: TelegramMessageEvent}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof postNotificationApiSendTelegramMessage>>,
        TError,
        {data: TelegramMessageEvent},
        TContext
      > => {

      const mutationOptions = getPostNotificationApiSendTelegramMessageMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getNotificationApiGetPushNotificationSettings = (
    params?: MaybeRef<GetNotificationApiGetPushNotificationSettingsParams>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return backendForAdminClient<PushNotificationSettingsDto>(
      {url: `/NotificationApi/GetPushNotificationSettings`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getGetNotificationApiGetPushNotificationSettingsQueryKey = (params?: MaybeRef<GetNotificationApiGetPushNotificationSettingsParams>,) => {
    return ['NotificationApi','GetPushNotificationSettings', ...(params ? [params]: [])] as const;
    }

    
export const getGetNotificationApiGetPushNotificationSettingsQueryOptions = <TData = Awaited<ReturnType<typeof getNotificationApiGetPushNotificationSettings>>, TError = ProblemDetails>(params?: MaybeRef<GetNotificationApiGetPushNotificationSettingsParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationApiGetPushNotificationSettings>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetNotificationApiGetPushNotificationSettingsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNotificationApiGetPushNotificationSettings>>> = ({ signal }) => getNotificationApiGetPushNotificationSettings(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNotificationApiGetPushNotificationSettings>>, TError, TData> 
}

export type GetNotificationApiGetPushNotificationSettingsQueryResult = NonNullable<Awaited<ReturnType<typeof getNotificationApiGetPushNotificationSettings>>>
export type GetNotificationApiGetPushNotificationSettingsQueryError = ProblemDetails



export function useGetNotificationApiGetPushNotificationSettings<TData = Awaited<ReturnType<typeof getNotificationApiGetPushNotificationSettings>>, TError = ProblemDetails>(
 params?: MaybeRef<GetNotificationApiGetPushNotificationSettingsParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationApiGetPushNotificationSettings>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetNotificationApiGetPushNotificationSettingsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const putNotificationApiUpdatePushNotification = (
    updatePushNotificationSettingsRequest: MaybeRef<UpdatePushNotificationSettingsRequest>,
 options?: SecondParameter<typeof backendForAdminClient>,) => {
      updatePushNotificationSettingsRequest = unref(updatePushNotificationSettingsRequest);
      
      return backendForAdminClient<boolean>(
      {url: `/NotificationApi/UpdatePushNotification`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updatePushNotificationSettingsRequest
    },
      options);
    }
  


export const getPutNotificationApiUpdatePushNotificationMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putNotificationApiUpdatePushNotification>>, TError,{data: UpdatePushNotificationSettingsRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof putNotificationApiUpdatePushNotification>>, TError,{data: UpdatePushNotificationSettingsRequest}, TContext> => {

const mutationKey = ['putNotificationApiUpdatePushNotification'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putNotificationApiUpdatePushNotification>>, {data: UpdatePushNotificationSettingsRequest}> = (props) => {
          const {data} = props ?? {};

          return  putNotificationApiUpdatePushNotification(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutNotificationApiUpdatePushNotificationMutationResult = NonNullable<Awaited<ReturnType<typeof putNotificationApiUpdatePushNotification>>>
    export type PutNotificationApiUpdatePushNotificationMutationBody = UpdatePushNotificationSettingsRequest
    export type PutNotificationApiUpdatePushNotificationMutationError = ProblemDetails

    export const usePutNotificationApiUpdatePushNotification = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putNotificationApiUpdatePushNotification>>, TError,{data: UpdatePushNotificationSettingsRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof putNotificationApiUpdatePushNotification>>,
        TError,
        {data: UpdatePushNotificationSettingsRequest},
        TContext
      > => {

      const mutationOptions = getPutNotificationApiUpdatePushNotificationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getNotificationApiGetSmsSettings = (
    params?: MaybeRef<GetNotificationApiGetSmsSettingsParams>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return backendForAdminClient<SmsSettingsDto>(
      {url: `/NotificationApi/GetSmsSettings`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getGetNotificationApiGetSmsSettingsQueryKey = (params?: MaybeRef<GetNotificationApiGetSmsSettingsParams>,) => {
    return ['NotificationApi','GetSmsSettings', ...(params ? [params]: [])] as const;
    }

    
export const getGetNotificationApiGetSmsSettingsQueryOptions = <TData = Awaited<ReturnType<typeof getNotificationApiGetSmsSettings>>, TError = unknown>(params?: MaybeRef<GetNotificationApiGetSmsSettingsParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationApiGetSmsSettings>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetNotificationApiGetSmsSettingsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNotificationApiGetSmsSettings>>> = ({ signal }) => getNotificationApiGetSmsSettings(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNotificationApiGetSmsSettings>>, TError, TData> 
}

export type GetNotificationApiGetSmsSettingsQueryResult = NonNullable<Awaited<ReturnType<typeof getNotificationApiGetSmsSettings>>>
export type GetNotificationApiGetSmsSettingsQueryError = unknown



export function useGetNotificationApiGetSmsSettings<TData = Awaited<ReturnType<typeof getNotificationApiGetSmsSettings>>, TError = unknown>(
 params?: MaybeRef<GetNotificationApiGetSmsSettingsParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationApiGetSmsSettings>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetNotificationApiGetSmsSettingsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const putNotificationApiUpdateSmsSettings = (
    smsSettingsDto: MaybeRef<SmsSettingsDto>,
 options?: SecondParameter<typeof backendForAdminClient>,) => {
      smsSettingsDto = unref(smsSettingsDto);
      
      return backendForAdminClient<boolean>(
      {url: `/NotificationApi/UpdateSmsSettings`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: smsSettingsDto
    },
      options);
    }
  


export const getPutNotificationApiUpdateSmsSettingsMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putNotificationApiUpdateSmsSettings>>, TError,{data: SmsSettingsDto}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof putNotificationApiUpdateSmsSettings>>, TError,{data: SmsSettingsDto}, TContext> => {

const mutationKey = ['putNotificationApiUpdateSmsSettings'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putNotificationApiUpdateSmsSettings>>, {data: SmsSettingsDto}> = (props) => {
          const {data} = props ?? {};

          return  putNotificationApiUpdateSmsSettings(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutNotificationApiUpdateSmsSettingsMutationResult = NonNullable<Awaited<ReturnType<typeof putNotificationApiUpdateSmsSettings>>>
    export type PutNotificationApiUpdateSmsSettingsMutationBody = SmsSettingsDto
    export type PutNotificationApiUpdateSmsSettingsMutationError = ProblemDetails

    export const usePutNotificationApiUpdateSmsSettings = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putNotificationApiUpdateSmsSettings>>, TError,{data: SmsSettingsDto}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof putNotificationApiUpdateSmsSettings>>,
        TError,
        {data: SmsSettingsDto},
        TContext
      > => {

      const mutationOptions = getPutNotificationApiUpdateSmsSettingsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getNotificationApiGetTelegramSettings = (
    params?: MaybeRef<GetNotificationApiGetTelegramSettingsParams>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return backendForAdminClient<TelegramSettingsDtoApiResponse>(
      {url: `/NotificationApi/GetTelegramSettings`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getGetNotificationApiGetTelegramSettingsQueryKey = (params?: MaybeRef<GetNotificationApiGetTelegramSettingsParams>,) => {
    return ['NotificationApi','GetTelegramSettings', ...(params ? [params]: [])] as const;
    }

    
export const getGetNotificationApiGetTelegramSettingsQueryOptions = <TData = Awaited<ReturnType<typeof getNotificationApiGetTelegramSettings>>, TError = unknown>(params?: MaybeRef<GetNotificationApiGetTelegramSettingsParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationApiGetTelegramSettings>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetNotificationApiGetTelegramSettingsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNotificationApiGetTelegramSettings>>> = ({ signal }) => getNotificationApiGetTelegramSettings(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNotificationApiGetTelegramSettings>>, TError, TData> 
}

export type GetNotificationApiGetTelegramSettingsQueryResult = NonNullable<Awaited<ReturnType<typeof getNotificationApiGetTelegramSettings>>>
export type GetNotificationApiGetTelegramSettingsQueryError = unknown



export function useGetNotificationApiGetTelegramSettings<TData = Awaited<ReturnType<typeof getNotificationApiGetTelegramSettings>>, TError = unknown>(
 params?: MaybeRef<GetNotificationApiGetTelegramSettingsParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationApiGetTelegramSettings>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetNotificationApiGetTelegramSettingsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const putNotificationApiUpdateTelegramSettings = (
    params?: MaybeRef<PutNotificationApiUpdateTelegramSettingsParams>,
 options?: SecondParameter<typeof backendForAdminClient>,) => {
      params = unref(params);
      
      return backendForAdminClient<boolean>(
      {url: `/NotificationApi/UpdateTelegramSettings`, method: 'PUT',
        params: unref(params)
    },
      options);
    }
  


export const getPutNotificationApiUpdateTelegramSettingsMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putNotificationApiUpdateTelegramSettings>>, TError,{params?: PutNotificationApiUpdateTelegramSettingsParams}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof putNotificationApiUpdateTelegramSettings>>, TError,{params?: PutNotificationApiUpdateTelegramSettingsParams}, TContext> => {

const mutationKey = ['putNotificationApiUpdateTelegramSettings'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putNotificationApiUpdateTelegramSettings>>, {params?: PutNotificationApiUpdateTelegramSettingsParams}> = (props) => {
          const {params} = props ?? {};

          return  putNotificationApiUpdateTelegramSettings(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutNotificationApiUpdateTelegramSettingsMutationResult = NonNullable<Awaited<ReturnType<typeof putNotificationApiUpdateTelegramSettings>>>
    
    export type PutNotificationApiUpdateTelegramSettingsMutationError = ProblemDetails

    export const usePutNotificationApiUpdateTelegramSettings = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putNotificationApiUpdateTelegramSettings>>, TError,{params?: PutNotificationApiUpdateTelegramSettingsParams}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof putNotificationApiUpdateTelegramSettings>>,
        TError,
        {params?: PutNotificationApiUpdateTelegramSettingsParams},
        TContext
      > => {

      const mutationOptions = getPutNotificationApiUpdateTelegramSettingsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getSchedulerApiGetJobs = (
    
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      
      
      return backendForAdminClient<JobDtoListApiResponse>(
      {url: `/SchedulerApi/GetJobs`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSchedulerApiGetJobsQueryKey = () => {
    return ['SchedulerApi','GetJobs'] as const;
    }

    
export const getGetSchedulerApiGetJobsQueryOptions = <TData = Awaited<ReturnType<typeof getSchedulerApiGetJobs>>, TError = StringApiResponse>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSchedulerApiGetJobs>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetSchedulerApiGetJobsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSchedulerApiGetJobs>>> = ({ signal }) => getSchedulerApiGetJobs(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSchedulerApiGetJobs>>, TError, TData> 
}

export type GetSchedulerApiGetJobsQueryResult = NonNullable<Awaited<ReturnType<typeof getSchedulerApiGetJobs>>>
export type GetSchedulerApiGetJobsQueryError = StringApiResponse



export function useGetSchedulerApiGetJobs<TData = Awaited<ReturnType<typeof getSchedulerApiGetJobs>>, TError = StringApiResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSchedulerApiGetJobs>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetSchedulerApiGetJobsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const postSchedulerApiCreateJob = (
    createJobRequest: MaybeRef<CreateJobRequest>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      createJobRequest = unref(createJobRequest);
      
      return backendForAdminClient<JobDtoApiResponse>(
      {url: `/SchedulerApi/CreateJob`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createJobRequest, signal
    },
      options);
    }
  


export const getPostSchedulerApiCreateJobMutationOptions = <TError = StringApiResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSchedulerApiCreateJob>>, TError,{data: CreateJobRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof postSchedulerApiCreateJob>>, TError,{data: CreateJobRequest}, TContext> => {

const mutationKey = ['postSchedulerApiCreateJob'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSchedulerApiCreateJob>>, {data: CreateJobRequest}> = (props) => {
          const {data} = props ?? {};

          return  postSchedulerApiCreateJob(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSchedulerApiCreateJobMutationResult = NonNullable<Awaited<ReturnType<typeof postSchedulerApiCreateJob>>>
    export type PostSchedulerApiCreateJobMutationBody = CreateJobRequest
    export type PostSchedulerApiCreateJobMutationError = StringApiResponse

    export const usePostSchedulerApiCreateJob = <TError = StringApiResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSchedulerApiCreateJob>>, TError,{data: CreateJobRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof postSchedulerApiCreateJob>>,
        TError,
        {data: CreateJobRequest},
        TContext
      > => {

      const mutationOptions = getPostSchedulerApiCreateJobMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const postSchedulerApiCreateJobInstance = (
    createJobInstanceRequest: MaybeRef<CreateJobInstanceRequest>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      createJobInstanceRequest = unref(createJobInstanceRequest);
      
      return backendForAdminClient<BooleanApiResponse>(
      {url: `/SchedulerApi/CreateJobInstance`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createJobInstanceRequest, signal
    },
      options);
    }
  


export const getPostSchedulerApiCreateJobInstanceMutationOptions = <TError = StringApiResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSchedulerApiCreateJobInstance>>, TError,{data: CreateJobInstanceRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof postSchedulerApiCreateJobInstance>>, TError,{data: CreateJobInstanceRequest}, TContext> => {

const mutationKey = ['postSchedulerApiCreateJobInstance'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSchedulerApiCreateJobInstance>>, {data: CreateJobInstanceRequest}> = (props) => {
          const {data} = props ?? {};

          return  postSchedulerApiCreateJobInstance(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSchedulerApiCreateJobInstanceMutationResult = NonNullable<Awaited<ReturnType<typeof postSchedulerApiCreateJobInstance>>>
    export type PostSchedulerApiCreateJobInstanceMutationBody = CreateJobInstanceRequest
    export type PostSchedulerApiCreateJobInstanceMutationError = StringApiResponse

    export const usePostSchedulerApiCreateJobInstance = <TError = StringApiResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSchedulerApiCreateJobInstance>>, TError,{data: CreateJobInstanceRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof postSchedulerApiCreateJobInstance>>,
        TError,
        {data: CreateJobInstanceRequest},
        TContext
      > => {

      const mutationOptions = getPostSchedulerApiCreateJobInstanceMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getSchedulerApiGetJobLogs = (
    params?: MaybeRef<GetSchedulerApiGetJobLogsParams>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return backendForAdminClient<JobLogDtoListApiResponse>(
      {url: `/SchedulerApi/GetJobLogs`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getGetSchedulerApiGetJobLogsQueryKey = (params?: MaybeRef<GetSchedulerApiGetJobLogsParams>,) => {
    return ['SchedulerApi','GetJobLogs', ...(params ? [params]: [])] as const;
    }

    
export const getGetSchedulerApiGetJobLogsQueryOptions = <TData = Awaited<ReturnType<typeof getSchedulerApiGetJobLogs>>, TError = unknown>(params?: MaybeRef<GetSchedulerApiGetJobLogsParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSchedulerApiGetJobLogs>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetSchedulerApiGetJobLogsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSchedulerApiGetJobLogs>>> = ({ signal }) => getSchedulerApiGetJobLogs(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSchedulerApiGetJobLogs>>, TError, TData> 
}

export type GetSchedulerApiGetJobLogsQueryResult = NonNullable<Awaited<ReturnType<typeof getSchedulerApiGetJobLogs>>>
export type GetSchedulerApiGetJobLogsQueryError = unknown



export function useGetSchedulerApiGetJobLogs<TData = Awaited<ReturnType<typeof getSchedulerApiGetJobLogs>>, TError = unknown>(
 params?: MaybeRef<GetSchedulerApiGetJobLogsParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSchedulerApiGetJobLogs>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetSchedulerApiGetJobLogsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const getSchedulerApiStopJob = (
    params?: MaybeRef<GetSchedulerApiStopJobParams>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return backendForAdminClient<BooleanApiResponse>(
      {url: `/SchedulerApi/StopJob`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getGetSchedulerApiStopJobQueryKey = (params?: MaybeRef<GetSchedulerApiStopJobParams>,) => {
    return ['SchedulerApi','StopJob', ...(params ? [params]: [])] as const;
    }

    
export const getGetSchedulerApiStopJobQueryOptions = <TData = Awaited<ReturnType<typeof getSchedulerApiStopJob>>, TError = StringApiResponse>(params?: MaybeRef<GetSchedulerApiStopJobParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSchedulerApiStopJob>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetSchedulerApiStopJobQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSchedulerApiStopJob>>> = ({ signal }) => getSchedulerApiStopJob(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSchedulerApiStopJob>>, TError, TData> 
}

export type GetSchedulerApiStopJobQueryResult = NonNullable<Awaited<ReturnType<typeof getSchedulerApiStopJob>>>
export type GetSchedulerApiStopJobQueryError = StringApiResponse



export function useGetSchedulerApiStopJob<TData = Awaited<ReturnType<typeof getSchedulerApiStopJob>>, TError = StringApiResponse>(
 params?: MaybeRef<GetSchedulerApiStopJobParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSchedulerApiStopJob>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetSchedulerApiStopJobQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const getSchedulerApiStartJob = (
    params?: MaybeRef<GetSchedulerApiStartJobParams>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return backendForAdminClient<BooleanApiResponse>(
      {url: `/SchedulerApi/StartJob`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getGetSchedulerApiStartJobQueryKey = (params?: MaybeRef<GetSchedulerApiStartJobParams>,) => {
    return ['SchedulerApi','StartJob', ...(params ? [params]: [])] as const;
    }

    
export const getGetSchedulerApiStartJobQueryOptions = <TData = Awaited<ReturnType<typeof getSchedulerApiStartJob>>, TError = unknown>(params?: MaybeRef<GetSchedulerApiStartJobParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSchedulerApiStartJob>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetSchedulerApiStartJobQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSchedulerApiStartJob>>> = ({ signal }) => getSchedulerApiStartJob(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSchedulerApiStartJob>>, TError, TData> 
}

export type GetSchedulerApiStartJobQueryResult = NonNullable<Awaited<ReturnType<typeof getSchedulerApiStartJob>>>
export type GetSchedulerApiStartJobQueryError = unknown



export function useGetSchedulerApiStartJob<TData = Awaited<ReturnType<typeof getSchedulerApiStartJob>>, TError = unknown>(
 params?: MaybeRef<GetSchedulerApiStartJobParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSchedulerApiStartJob>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetSchedulerApiStartJobQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const getSchedulerApiDeleteJob = (
    params?: MaybeRef<GetSchedulerApiDeleteJobParams>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return backendForAdminClient<BooleanApiResponse>(
      {url: `/SchedulerApi/DeleteJob`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getGetSchedulerApiDeleteJobQueryKey = (params?: MaybeRef<GetSchedulerApiDeleteJobParams>,) => {
    return ['SchedulerApi','DeleteJob', ...(params ? [params]: [])] as const;
    }

    
export const getGetSchedulerApiDeleteJobQueryOptions = <TData = Awaited<ReturnType<typeof getSchedulerApiDeleteJob>>, TError = unknown>(params?: MaybeRef<GetSchedulerApiDeleteJobParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSchedulerApiDeleteJob>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetSchedulerApiDeleteJobQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSchedulerApiDeleteJob>>> = ({ signal }) => getSchedulerApiDeleteJob(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSchedulerApiDeleteJob>>, TError, TData> 
}

export type GetSchedulerApiDeleteJobQueryResult = NonNullable<Awaited<ReturnType<typeof getSchedulerApiDeleteJob>>>
export type GetSchedulerApiDeleteJobQueryError = unknown



export function useGetSchedulerApiDeleteJob<TData = Awaited<ReturnType<typeof getSchedulerApiDeleteJob>>, TError = unknown>(
 params?: MaybeRef<GetSchedulerApiDeleteJobParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSchedulerApiDeleteJob>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetSchedulerApiDeleteJobQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const postSchedulerApiUpdateJob = (
    updateJobRequest: MaybeRef<UpdateJobRequest>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      updateJobRequest = unref(updateJobRequest);
      
      return backendForAdminClient<BooleanApiResponse>(
      {url: `/SchedulerApi/UpdateJob`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: updateJobRequest, signal
    },
      options);
    }
  


export const getPostSchedulerApiUpdateJobMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSchedulerApiUpdateJob>>, TError,{data: UpdateJobRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof postSchedulerApiUpdateJob>>, TError,{data: UpdateJobRequest}, TContext> => {

const mutationKey = ['postSchedulerApiUpdateJob'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSchedulerApiUpdateJob>>, {data: UpdateJobRequest}> = (props) => {
          const {data} = props ?? {};

          return  postSchedulerApiUpdateJob(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSchedulerApiUpdateJobMutationResult = NonNullable<Awaited<ReturnType<typeof postSchedulerApiUpdateJob>>>
    export type PostSchedulerApiUpdateJobMutationBody = UpdateJobRequest
    export type PostSchedulerApiUpdateJobMutationError = unknown

    export const usePostSchedulerApiUpdateJob = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSchedulerApiUpdateJob>>, TError,{data: UpdateJobRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof postSchedulerApiUpdateJob>>,
        TError,
        {data: UpdateJobRequest},
        TContext
      > => {

      const mutationOptions = getPostSchedulerApiUpdateJobMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getSchedulerApiGetProjectSchedulerApiCount = (
    
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      
      
      return backendForAdminClient<Int32ApiResponse>(
      {url: `/SchedulerApi/GetProjectSchedulerApiCount`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSchedulerApiGetProjectSchedulerApiCountQueryKey = () => {
    return ['SchedulerApi','GetProjectSchedulerApiCount'] as const;
    }

    
export const getGetSchedulerApiGetProjectSchedulerApiCountQueryOptions = <TData = Awaited<ReturnType<typeof getSchedulerApiGetProjectSchedulerApiCount>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSchedulerApiGetProjectSchedulerApiCount>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetSchedulerApiGetProjectSchedulerApiCountQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSchedulerApiGetProjectSchedulerApiCount>>> = ({ signal }) => getSchedulerApiGetProjectSchedulerApiCount(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSchedulerApiGetProjectSchedulerApiCount>>, TError, TData> 
}

export type GetSchedulerApiGetProjectSchedulerApiCountQueryResult = NonNullable<Awaited<ReturnType<typeof getSchedulerApiGetProjectSchedulerApiCount>>>
export type GetSchedulerApiGetProjectSchedulerApiCountQueryError = unknown



export function useGetSchedulerApiGetProjectSchedulerApiCount<TData = Awaited<ReturnType<typeof getSchedulerApiGetProjectSchedulerApiCount>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSchedulerApiGetProjectSchedulerApiCount>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetSchedulerApiGetProjectSchedulerApiCountQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const postUserApiSignUpWithPhoneNumber = (
    signUpWithPhoneNumberRequest: MaybeRef<SignUpWithPhoneNumberRequest>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      signUpWithPhoneNumberRequest = unref(signUpWithPhoneNumberRequest);
      
      return backendForAdminClient<StringApiResponse>(
      {url: `/UserApi/SignUpWithPhoneNumber`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: signUpWithPhoneNumberRequest, signal
    },
      options);
    }
  


export const getPostUserApiSignUpWithPhoneNumberMutationOptions = <TError = StringApiResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserApiSignUpWithPhoneNumber>>, TError,{data: SignUpWithPhoneNumberRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof postUserApiSignUpWithPhoneNumber>>, TError,{data: SignUpWithPhoneNumberRequest}, TContext> => {

const mutationKey = ['postUserApiSignUpWithPhoneNumber'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUserApiSignUpWithPhoneNumber>>, {data: SignUpWithPhoneNumberRequest}> = (props) => {
          const {data} = props ?? {};

          return  postUserApiSignUpWithPhoneNumber(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUserApiSignUpWithPhoneNumberMutationResult = NonNullable<Awaited<ReturnType<typeof postUserApiSignUpWithPhoneNumber>>>
    export type PostUserApiSignUpWithPhoneNumberMutationBody = SignUpWithPhoneNumberRequest
    export type PostUserApiSignUpWithPhoneNumberMutationError = StringApiResponse

    export const usePostUserApiSignUpWithPhoneNumber = <TError = StringApiResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserApiSignUpWithPhoneNumber>>, TError,{data: SignUpWithPhoneNumberRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof postUserApiSignUpWithPhoneNumber>>,
        TError,
        {data: SignUpWithPhoneNumberRequest},
        TContext
      > => {

      const mutationOptions = getPostUserApiSignUpWithPhoneNumberMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const postUserApiSignInWithSmsOtp = (
    signInWithSmsOtpRequest: MaybeRef<SignInWithSmsOtpRequest>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      signInWithSmsOtpRequest = unref(signInWithSmsOtpRequest);
      
      return backendForAdminClient<LoginWithTwoFaResponseApiResponse>(
      {url: `/UserApi/SignInWithSmsOtp`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: signInWithSmsOtpRequest, signal
    },
      options);
    }
  


export const getPostUserApiSignInWithSmsOtpMutationOptions = <TError = LoginWithTwoFaResponseApiResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserApiSignInWithSmsOtp>>, TError,{data: SignInWithSmsOtpRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof postUserApiSignInWithSmsOtp>>, TError,{data: SignInWithSmsOtpRequest}, TContext> => {

const mutationKey = ['postUserApiSignInWithSmsOtp'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUserApiSignInWithSmsOtp>>, {data: SignInWithSmsOtpRequest}> = (props) => {
          const {data} = props ?? {};

          return  postUserApiSignInWithSmsOtp(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUserApiSignInWithSmsOtpMutationResult = NonNullable<Awaited<ReturnType<typeof postUserApiSignInWithSmsOtp>>>
    export type PostUserApiSignInWithSmsOtpMutationBody = SignInWithSmsOtpRequest
    export type PostUserApiSignInWithSmsOtpMutationError = LoginWithTwoFaResponseApiResponse

    export const usePostUserApiSignInWithSmsOtp = <TError = LoginWithTwoFaResponseApiResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserApiSignInWithSmsOtp>>, TError,{data: SignInWithSmsOtpRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof postUserApiSignInWithSmsOtp>>,
        TError,
        {data: SignInWithSmsOtpRequest},
        TContext
      > => {

      const mutationOptions = getPostUserApiSignInWithSmsOtpMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const postUserApiRegister = (
    registerUserRequest: MaybeRef<RegisterUserRequest>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      registerUserRequest = unref(registerUserRequest);
      
      return backendForAdminClient<BooleanApiResponse>(
      {url: `/UserApi/Register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: registerUserRequest, signal
    },
      options);
    }
  


export const getPostUserApiRegisterMutationOptions = <TError = BooleanApiResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserApiRegister>>, TError,{data: RegisterUserRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof postUserApiRegister>>, TError,{data: RegisterUserRequest}, TContext> => {

const mutationKey = ['postUserApiRegister'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUserApiRegister>>, {data: RegisterUserRequest}> = (props) => {
          const {data} = props ?? {};

          return  postUserApiRegister(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUserApiRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof postUserApiRegister>>>
    export type PostUserApiRegisterMutationBody = RegisterUserRequest
    export type PostUserApiRegisterMutationError = BooleanApiResponse

    export const usePostUserApiRegister = <TError = BooleanApiResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserApiRegister>>, TError,{data: RegisterUserRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof postUserApiRegister>>,
        TError,
        {data: RegisterUserRequest},
        TContext
      > => {

      const mutationOptions = getPostUserApiRegisterMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const postUserApiLogin = (
    loginRequest: MaybeRef<LoginRequest>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      loginRequest = unref(loginRequest);
      
      return backendForAdminClient<LoginResponseApiResponse>(
      {url: `/UserApi/Login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: loginRequest, signal
    },
      options);
    }
  


export const getPostUserApiLoginMutationOptions = <TError = LoginResponseApiResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserApiLogin>>, TError,{data: LoginRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof postUserApiLogin>>, TError,{data: LoginRequest}, TContext> => {

const mutationKey = ['postUserApiLogin'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUserApiLogin>>, {data: LoginRequest}> = (props) => {
          const {data} = props ?? {};

          return  postUserApiLogin(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUserApiLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postUserApiLogin>>>
    export type PostUserApiLoginMutationBody = LoginRequest
    export type PostUserApiLoginMutationError = LoginResponseApiResponse

    export const usePostUserApiLogin = <TError = LoginResponseApiResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserApiLogin>>, TError,{data: LoginRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof postUserApiLogin>>,
        TError,
        {data: LoginRequest},
        TContext
      > => {

      const mutationOptions = getPostUserApiLoginMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const postUserApiLoginWith2Fa = (
    loginWithTwoFaRequest: MaybeRef<LoginWithTwoFaRequest>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      loginWithTwoFaRequest = unref(loginWithTwoFaRequest);
      
      return backendForAdminClient<LoginWithTwoFaResponseApiResponse>(
      {url: `/UserApi/LoginWith2Fa`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: loginWithTwoFaRequest, signal
    },
      options);
    }
  


export const getPostUserApiLoginWith2FaMutationOptions = <TError = LoginWithTwoFaResponseApiResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserApiLoginWith2Fa>>, TError,{data: LoginWithTwoFaRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof postUserApiLoginWith2Fa>>, TError,{data: LoginWithTwoFaRequest}, TContext> => {

const mutationKey = ['postUserApiLoginWith2Fa'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUserApiLoginWith2Fa>>, {data: LoginWithTwoFaRequest}> = (props) => {
          const {data} = props ?? {};

          return  postUserApiLoginWith2Fa(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUserApiLoginWith2FaMutationResult = NonNullable<Awaited<ReturnType<typeof postUserApiLoginWith2Fa>>>
    export type PostUserApiLoginWith2FaMutationBody = LoginWithTwoFaRequest
    export type PostUserApiLoginWith2FaMutationError = LoginWithTwoFaResponseApiResponse

    export const usePostUserApiLoginWith2Fa = <TError = LoginWithTwoFaResponseApiResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserApiLoginWith2Fa>>, TError,{data: LoginWithTwoFaRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof postUserApiLoginWith2Fa>>,
        TError,
        {data: LoginWithTwoFaRequest},
        TContext
      > => {

      const mutationOptions = getPostUserApiLoginWith2FaMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const postUserApiRefreshToken = (
    refreshTokenRequest: MaybeRef<RefreshTokenRequest>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      refreshTokenRequest = unref(refreshTokenRequest);
      
      return backendForAdminClient<LoginResponseApiResponse>(
      {url: `/UserApi/RefreshToken`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: refreshTokenRequest, signal
    },
      options);
    }
  


export const getPostUserApiRefreshTokenMutationOptions = <TError = LoginResponseApiResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserApiRefreshToken>>, TError,{data: RefreshTokenRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof postUserApiRefreshToken>>, TError,{data: RefreshTokenRequest}, TContext> => {

const mutationKey = ['postUserApiRefreshToken'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUserApiRefreshToken>>, {data: RefreshTokenRequest}> = (props) => {
          const {data} = props ?? {};

          return  postUserApiRefreshToken(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUserApiRefreshTokenMutationResult = NonNullable<Awaited<ReturnType<typeof postUserApiRefreshToken>>>
    export type PostUserApiRefreshTokenMutationBody = RefreshTokenRequest
    export type PostUserApiRefreshTokenMutationError = LoginResponseApiResponse

    export const usePostUserApiRefreshToken = <TError = LoginResponseApiResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserApiRefreshToken>>, TError,{data: RefreshTokenRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof postUserApiRefreshToken>>,
        TError,
        {data: RefreshTokenRequest},
        TContext
      > => {

      const mutationOptions = getPostUserApiRefreshTokenMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getUserApiLogoutFromAllDevices = (
    params?: MaybeRef<GetUserApiLogoutFromAllDevicesParams>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return backendForAdminClient<BooleanApiResponse>(
      {url: `/UserApi/LogoutFromAllDevices`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getGetUserApiLogoutFromAllDevicesQueryKey = (params?: MaybeRef<GetUserApiLogoutFromAllDevicesParams>,) => {
    return ['UserApi','LogoutFromAllDevices', ...(params ? [params]: [])] as const;
    }

    
export const getGetUserApiLogoutFromAllDevicesQueryOptions = <TData = Awaited<ReturnType<typeof getUserApiLogoutFromAllDevices>>, TError = unknown>(params?: MaybeRef<GetUserApiLogoutFromAllDevicesParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiLogoutFromAllDevices>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetUserApiLogoutFromAllDevicesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserApiLogoutFromAllDevices>>> = ({ signal }) => getUserApiLogoutFromAllDevices(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserApiLogoutFromAllDevices>>, TError, TData> 
}

export type GetUserApiLogoutFromAllDevicesQueryResult = NonNullable<Awaited<ReturnType<typeof getUserApiLogoutFromAllDevices>>>
export type GetUserApiLogoutFromAllDevicesQueryError = unknown



export function useGetUserApiLogoutFromAllDevices<TData = Awaited<ReturnType<typeof getUserApiLogoutFromAllDevices>>, TError = unknown>(
 params?: MaybeRef<GetUserApiLogoutFromAllDevicesParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiLogoutFromAllDevices>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserApiLogoutFromAllDevicesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const getUserApiForgetPassword = (
    params?: MaybeRef<GetUserApiForgetPasswordParams>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return backendForAdminClient<BooleanApiResponse>(
      {url: `/UserApi/ForgetPassword`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getGetUserApiForgetPasswordQueryKey = (params?: MaybeRef<GetUserApiForgetPasswordParams>,) => {
    return ['UserApi','ForgetPassword', ...(params ? [params]: [])] as const;
    }

    
export const getGetUserApiForgetPasswordQueryOptions = <TData = Awaited<ReturnType<typeof getUserApiForgetPassword>>, TError = BooleanApiResponse>(params?: MaybeRef<GetUserApiForgetPasswordParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiForgetPassword>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetUserApiForgetPasswordQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserApiForgetPassword>>> = ({ signal }) => getUserApiForgetPassword(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserApiForgetPassword>>, TError, TData> 
}

export type GetUserApiForgetPasswordQueryResult = NonNullable<Awaited<ReturnType<typeof getUserApiForgetPassword>>>
export type GetUserApiForgetPasswordQueryError = BooleanApiResponse



export function useGetUserApiForgetPassword<TData = Awaited<ReturnType<typeof getUserApiForgetPassword>>, TError = BooleanApiResponse>(
 params?: MaybeRef<GetUserApiForgetPasswordParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiForgetPassword>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserApiForgetPasswordQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const getUserApiCheckPassword = (
    params?: MaybeRef<GetUserApiCheckPasswordParams>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return backendForAdminClient<BooleanApiResponse>(
      {url: `/UserApi/CheckPassword`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getGetUserApiCheckPasswordQueryKey = (params?: MaybeRef<GetUserApiCheckPasswordParams>,) => {
    return ['UserApi','CheckPassword', ...(params ? [params]: [])] as const;
    }

    
export const getGetUserApiCheckPasswordQueryOptions = <TData = Awaited<ReturnType<typeof getUserApiCheckPassword>>, TError = BooleanApiResponse>(params?: MaybeRef<GetUserApiCheckPasswordParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiCheckPassword>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetUserApiCheckPasswordQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserApiCheckPassword>>> = ({ signal }) => getUserApiCheckPassword(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserApiCheckPassword>>, TError, TData> 
}

export type GetUserApiCheckPasswordQueryResult = NonNullable<Awaited<ReturnType<typeof getUserApiCheckPassword>>>
export type GetUserApiCheckPasswordQueryError = BooleanApiResponse



export function useGetUserApiCheckPassword<TData = Awaited<ReturnType<typeof getUserApiCheckPassword>>, TError = BooleanApiResponse>(
 params?: MaybeRef<GetUserApiCheckPasswordParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiCheckPassword>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserApiCheckPasswordQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const postUserApiResetPassword = (
    resetPasswordRequest: MaybeRef<ResetPasswordRequest>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      resetPasswordRequest = unref(resetPasswordRequest);
      
      return backendForAdminClient<BooleanApiResponse>(
      {url: `/UserApi/ResetPassword`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: resetPasswordRequest, signal
    },
      options);
    }
  


export const getPostUserApiResetPasswordMutationOptions = <TError = BooleanApiResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserApiResetPassword>>, TError,{data: ResetPasswordRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof postUserApiResetPassword>>, TError,{data: ResetPasswordRequest}, TContext> => {

const mutationKey = ['postUserApiResetPassword'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUserApiResetPassword>>, {data: ResetPasswordRequest}> = (props) => {
          const {data} = props ?? {};

          return  postUserApiResetPassword(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUserApiResetPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postUserApiResetPassword>>>
    export type PostUserApiResetPasswordMutationBody = ResetPasswordRequest
    export type PostUserApiResetPasswordMutationError = BooleanApiResponse

    export const usePostUserApiResetPassword = <TError = BooleanApiResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserApiResetPassword>>, TError,{data: ResetPasswordRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof postUserApiResetPassword>>,
        TError,
        {data: ResetPasswordRequest},
        TContext
      > => {

      const mutationOptions = getPostUserApiResetPasswordMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const postUserApiChangePassword = (
    changePasswordRequest: MaybeRef<ChangePasswordRequest>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      changePasswordRequest = unref(changePasswordRequest);
      
      return backendForAdminClient<BooleanApiResponse>(
      {url: `/UserApi/ChangePassword`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: changePasswordRequest, signal
    },
      options);
    }
  


export const getPostUserApiChangePasswordMutationOptions = <TError = BooleanApiResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserApiChangePassword>>, TError,{data: ChangePasswordRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof postUserApiChangePassword>>, TError,{data: ChangePasswordRequest}, TContext> => {

const mutationKey = ['postUserApiChangePassword'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUserApiChangePassword>>, {data: ChangePasswordRequest}> = (props) => {
          const {data} = props ?? {};

          return  postUserApiChangePassword(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUserApiChangePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postUserApiChangePassword>>>
    export type PostUserApiChangePasswordMutationBody = ChangePasswordRequest
    export type PostUserApiChangePasswordMutationError = BooleanApiResponse

    export const usePostUserApiChangePassword = <TError = BooleanApiResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserApiChangePassword>>, TError,{data: ChangePasswordRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof postUserApiChangePassword>>,
        TError,
        {data: ChangePasswordRequest},
        TContext
      > => {

      const mutationOptions = getPostUserApiChangePasswordMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getUserApiConfirmEmail = (
    params?: MaybeRef<GetUserApiConfirmEmailParams>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return backendForAdminClient<BooleanApiResponse>(
      {url: `/UserApi/ConfirmEmail`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getGetUserApiConfirmEmailQueryKey = (params?: MaybeRef<GetUserApiConfirmEmailParams>,) => {
    return ['UserApi','ConfirmEmail', ...(params ? [params]: [])] as const;
    }

    
export const getGetUserApiConfirmEmailQueryOptions = <TData = Awaited<ReturnType<typeof getUserApiConfirmEmail>>, TError = BooleanApiResponse>(params?: MaybeRef<GetUserApiConfirmEmailParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiConfirmEmail>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetUserApiConfirmEmailQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserApiConfirmEmail>>> = ({ signal }) => getUserApiConfirmEmail(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserApiConfirmEmail>>, TError, TData> 
}

export type GetUserApiConfirmEmailQueryResult = NonNullable<Awaited<ReturnType<typeof getUserApiConfirmEmail>>>
export type GetUserApiConfirmEmailQueryError = BooleanApiResponse



export function useGetUserApiConfirmEmail<TData = Awaited<ReturnType<typeof getUserApiConfirmEmail>>, TError = BooleanApiResponse>(
 params?: MaybeRef<GetUserApiConfirmEmailParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiConfirmEmail>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserApiConfirmEmailQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const getUserApiSendConfirmationEmail = (
    params?: MaybeRef<GetUserApiSendConfirmationEmailParams>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return backendForAdminClient<BooleanApiResponse>(
      {url: `/UserApi/SendConfirmationEmail`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getGetUserApiSendConfirmationEmailQueryKey = (params?: MaybeRef<GetUserApiSendConfirmationEmailParams>,) => {
    return ['UserApi','SendConfirmationEmail', ...(params ? [params]: [])] as const;
    }

    
export const getGetUserApiSendConfirmationEmailQueryOptions = <TData = Awaited<ReturnType<typeof getUserApiSendConfirmationEmail>>, TError = BooleanApiResponse>(params?: MaybeRef<GetUserApiSendConfirmationEmailParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiSendConfirmationEmail>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetUserApiSendConfirmationEmailQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserApiSendConfirmationEmail>>> = ({ signal }) => getUserApiSendConfirmationEmail(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserApiSendConfirmationEmail>>, TError, TData> 
}

export type GetUserApiSendConfirmationEmailQueryResult = NonNullable<Awaited<ReturnType<typeof getUserApiSendConfirmationEmail>>>
export type GetUserApiSendConfirmationEmailQueryError = BooleanApiResponse



export function useGetUserApiSendConfirmationEmail<TData = Awaited<ReturnType<typeof getUserApiSendConfirmationEmail>>, TError = BooleanApiResponse>(
 params?: MaybeRef<GetUserApiSendConfirmationEmailParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiSendConfirmationEmail>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserApiSendConfirmationEmailQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const getUserApiGetTwoFactorStatus = (
    params?: MaybeRef<GetUserApiGetTwoFactorStatusParams>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return backendForAdminClient<BooleanApiResponse>(
      {url: `/UserApi/GetTwoFactorStatus`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getGetUserApiGetTwoFactorStatusQueryKey = (params?: MaybeRef<GetUserApiGetTwoFactorStatusParams>,) => {
    return ['UserApi','GetTwoFactorStatus', ...(params ? [params]: [])] as const;
    }

    
export const getGetUserApiGetTwoFactorStatusQueryOptions = <TData = Awaited<ReturnType<typeof getUserApiGetTwoFactorStatus>>, TError = BooleanApiResponse>(params?: MaybeRef<GetUserApiGetTwoFactorStatusParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiGetTwoFactorStatus>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetUserApiGetTwoFactorStatusQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserApiGetTwoFactorStatus>>> = ({ signal }) => getUserApiGetTwoFactorStatus(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserApiGetTwoFactorStatus>>, TError, TData> 
}

export type GetUserApiGetTwoFactorStatusQueryResult = NonNullable<Awaited<ReturnType<typeof getUserApiGetTwoFactorStatus>>>
export type GetUserApiGetTwoFactorStatusQueryError = BooleanApiResponse



export function useGetUserApiGetTwoFactorStatus<TData = Awaited<ReturnType<typeof getUserApiGetTwoFactorStatus>>, TError = BooleanApiResponse>(
 params?: MaybeRef<GetUserApiGetTwoFactorStatusParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiGetTwoFactorStatus>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserApiGetTwoFactorStatusQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const getUserApiGetAuthenticatorSetup = (
    params?: MaybeRef<GetUserApiGetAuthenticatorSetupParams>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return backendForAdminClient<BooleanApiResponse>(
      {url: `/UserApi/GetAuthenticatorSetup`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getGetUserApiGetAuthenticatorSetupQueryKey = (params?: MaybeRef<GetUserApiGetAuthenticatorSetupParams>,) => {
    return ['UserApi','GetAuthenticatorSetup', ...(params ? [params]: [])] as const;
    }

    
export const getGetUserApiGetAuthenticatorSetupQueryOptions = <TData = Awaited<ReturnType<typeof getUserApiGetAuthenticatorSetup>>, TError = BooleanApiResponse>(params?: MaybeRef<GetUserApiGetAuthenticatorSetupParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiGetAuthenticatorSetup>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetUserApiGetAuthenticatorSetupQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserApiGetAuthenticatorSetup>>> = ({ signal }) => getUserApiGetAuthenticatorSetup(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserApiGetAuthenticatorSetup>>, TError, TData> 
}

export type GetUserApiGetAuthenticatorSetupQueryResult = NonNullable<Awaited<ReturnType<typeof getUserApiGetAuthenticatorSetup>>>
export type GetUserApiGetAuthenticatorSetupQueryError = BooleanApiResponse



export function useGetUserApiGetAuthenticatorSetup<TData = Awaited<ReturnType<typeof getUserApiGetAuthenticatorSetup>>, TError = BooleanApiResponse>(
 params?: MaybeRef<GetUserApiGetAuthenticatorSetupParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiGetAuthenticatorSetup>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserApiGetAuthenticatorSetupQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const postUserApiToggleTwoFactor = (
    toggleTotpRequest: MaybeRef<ToggleTotpRequest>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      toggleTotpRequest = unref(toggleTotpRequest);
      
      return backendForAdminClient<BooleanApiResponse>(
      {url: `/UserApi/ToggleTwoFactor`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: toggleTotpRequest, signal
    },
      options);
    }
  


export const getPostUserApiToggleTwoFactorMutationOptions = <TError = BooleanApiResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserApiToggleTwoFactor>>, TError,{data: ToggleTotpRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof postUserApiToggleTwoFactor>>, TError,{data: ToggleTotpRequest}, TContext> => {

const mutationKey = ['postUserApiToggleTwoFactor'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUserApiToggleTwoFactor>>, {data: ToggleTotpRequest}> = (props) => {
          const {data} = props ?? {};

          return  postUserApiToggleTwoFactor(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUserApiToggleTwoFactorMutationResult = NonNullable<Awaited<ReturnType<typeof postUserApiToggleTwoFactor>>>
    export type PostUserApiToggleTwoFactorMutationBody = ToggleTotpRequest
    export type PostUserApiToggleTwoFactorMutationError = BooleanApiResponse

    export const usePostUserApiToggleTwoFactor = <TError = BooleanApiResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserApiToggleTwoFactor>>, TError,{data: ToggleTotpRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof postUserApiToggleTwoFactor>>,
        TError,
        {data: ToggleTotpRequest},
        TContext
      > => {

      const mutationOptions = getPostUserApiToggleTwoFactorMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getUserApiDisableTwoFactor = (
    params?: MaybeRef<GetUserApiDisableTwoFactorParams>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return backendForAdminClient<BooleanApiResponse>(
      {url: `/UserApi/DisableTwoFactor`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getGetUserApiDisableTwoFactorQueryKey = (params?: MaybeRef<GetUserApiDisableTwoFactorParams>,) => {
    return ['UserApi','DisableTwoFactor', ...(params ? [params]: [])] as const;
    }

    
export const getGetUserApiDisableTwoFactorQueryOptions = <TData = Awaited<ReturnType<typeof getUserApiDisableTwoFactor>>, TError = BooleanApiResponse>(params?: MaybeRef<GetUserApiDisableTwoFactorParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiDisableTwoFactor>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetUserApiDisableTwoFactorQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserApiDisableTwoFactor>>> = ({ signal }) => getUserApiDisableTwoFactor(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserApiDisableTwoFactor>>, TError, TData> 
}

export type GetUserApiDisableTwoFactorQueryResult = NonNullable<Awaited<ReturnType<typeof getUserApiDisableTwoFactor>>>
export type GetUserApiDisableTwoFactorQueryError = BooleanApiResponse



export function useGetUserApiDisableTwoFactor<TData = Awaited<ReturnType<typeof getUserApiDisableTwoFactor>>, TError = BooleanApiResponse>(
 params?: MaybeRef<GetUserApiDisableTwoFactorParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiDisableTwoFactor>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserApiDisableTwoFactorQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const getUserApiEnableTwoFactor = (
    params?: MaybeRef<GetUserApiEnableTwoFactorParams>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return backendForAdminClient<StringListApiResponse>(
      {url: `/UserApi/EnableTwoFactor`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getGetUserApiEnableTwoFactorQueryKey = (params?: MaybeRef<GetUserApiEnableTwoFactorParams>,) => {
    return ['UserApi','EnableTwoFactor', ...(params ? [params]: [])] as const;
    }

    
export const getGetUserApiEnableTwoFactorQueryOptions = <TData = Awaited<ReturnType<typeof getUserApiEnableTwoFactor>>, TError = StringListApiResponse>(params?: MaybeRef<GetUserApiEnableTwoFactorParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiEnableTwoFactor>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetUserApiEnableTwoFactorQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserApiEnableTwoFactor>>> = ({ signal }) => getUserApiEnableTwoFactor(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserApiEnableTwoFactor>>, TError, TData> 
}

export type GetUserApiEnableTwoFactorQueryResult = NonNullable<Awaited<ReturnType<typeof getUserApiEnableTwoFactor>>>
export type GetUserApiEnableTwoFactorQueryError = StringListApiResponse



export function useGetUserApiEnableTwoFactor<TData = Awaited<ReturnType<typeof getUserApiEnableTwoFactor>>, TError = StringListApiResponse>(
 params?: MaybeRef<GetUserApiEnableTwoFactorParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiEnableTwoFactor>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserApiEnableTwoFactorQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const getUserApiSendTwoFaCode = (
    params?: MaybeRef<GetUserApiSendTwoFaCodeParams>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return backendForAdminClient<BooleanApiResponse>(
      {url: `/UserApi/SendTwoFaCode`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getGetUserApiSendTwoFaCodeQueryKey = (params?: MaybeRef<GetUserApiSendTwoFaCodeParams>,) => {
    return ['UserApi','SendTwoFaCode', ...(params ? [params]: [])] as const;
    }

    
export const getGetUserApiSendTwoFaCodeQueryOptions = <TData = Awaited<ReturnType<typeof getUserApiSendTwoFaCode>>, TError = unknown>(params?: MaybeRef<GetUserApiSendTwoFaCodeParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiSendTwoFaCode>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetUserApiSendTwoFaCodeQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserApiSendTwoFaCode>>> = ({ signal }) => getUserApiSendTwoFaCode(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserApiSendTwoFaCode>>, TError, TData> 
}

export type GetUserApiSendTwoFaCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getUserApiSendTwoFaCode>>>
export type GetUserApiSendTwoFaCodeQueryError = unknown



export function useGetUserApiSendTwoFaCode<TData = Awaited<ReturnType<typeof getUserApiSendTwoFaCode>>, TError = unknown>(
 params?: MaybeRef<GetUserApiSendTwoFaCodeParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiSendTwoFaCode>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserApiSendTwoFaCodeQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const getUserApiGetAuthenticatorKey = (
    params?: MaybeRef<GetUserApiGetAuthenticatorKeyParams>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return backendForAdminClient<StringApiResponse>(
      {url: `/UserApi/GetAuthenticatorKey`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getGetUserApiGetAuthenticatorKeyQueryKey = (params?: MaybeRef<GetUserApiGetAuthenticatorKeyParams>,) => {
    return ['UserApi','GetAuthenticatorKey', ...(params ? [params]: [])] as const;
    }

    
export const getGetUserApiGetAuthenticatorKeyQueryOptions = <TData = Awaited<ReturnType<typeof getUserApiGetAuthenticatorKey>>, TError = unknown>(params?: MaybeRef<GetUserApiGetAuthenticatorKeyParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiGetAuthenticatorKey>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetUserApiGetAuthenticatorKeyQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserApiGetAuthenticatorKey>>> = ({ signal }) => getUserApiGetAuthenticatorKey(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserApiGetAuthenticatorKey>>, TError, TData> 
}

export type GetUserApiGetAuthenticatorKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getUserApiGetAuthenticatorKey>>>
export type GetUserApiGetAuthenticatorKeyQueryError = unknown



export function useGetUserApiGetAuthenticatorKey<TData = Awaited<ReturnType<typeof getUserApiGetAuthenticatorKey>>, TError = unknown>(
 params?: MaybeRef<GetUserApiGetAuthenticatorKeyParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiGetAuthenticatorKey>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserApiGetAuthenticatorKeyQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const getUserApiGetUserRoles = (
    params?: MaybeRef<GetUserApiGetUserRolesParams>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return backendForAdminClient<void>(
      {url: `/UserApi/GetUserRoles`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getGetUserApiGetUserRolesQueryKey = (params?: MaybeRef<GetUserApiGetUserRolesParams>,) => {
    return ['UserApi','GetUserRoles', ...(params ? [params]: [])] as const;
    }

    
export const getGetUserApiGetUserRolesQueryOptions = <TData = Awaited<ReturnType<typeof getUserApiGetUserRoles>>, TError = unknown>(params?: MaybeRef<GetUserApiGetUserRolesParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiGetUserRoles>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetUserApiGetUserRolesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserApiGetUserRoles>>> = ({ signal }) => getUserApiGetUserRoles(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserApiGetUserRoles>>, TError, TData> 
}

export type GetUserApiGetUserRolesQueryResult = NonNullable<Awaited<ReturnType<typeof getUserApiGetUserRoles>>>
export type GetUserApiGetUserRolesQueryError = unknown



export function useGetUserApiGetUserRoles<TData = Awaited<ReturnType<typeof getUserApiGetUserRoles>>, TError = unknown>(
 params?: MaybeRef<GetUserApiGetUserRolesParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiGetUserRoles>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserApiGetUserRolesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const getUserApiGetAllRoles = (
    
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      
      
      return backendForAdminClient<void>(
      {url: `/UserApi/GetAllRoles`, method: 'GET', signal
    },
      options);
    }
  

export const getGetUserApiGetAllRolesQueryKey = () => {
    return ['UserApi','GetAllRoles'] as const;
    }

    
export const getGetUserApiGetAllRolesQueryOptions = <TData = Awaited<ReturnType<typeof getUserApiGetAllRoles>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiGetAllRoles>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetUserApiGetAllRolesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserApiGetAllRoles>>> = ({ signal }) => getUserApiGetAllRoles(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserApiGetAllRoles>>, TError, TData> 
}

export type GetUserApiGetAllRolesQueryResult = NonNullable<Awaited<ReturnType<typeof getUserApiGetAllRoles>>>
export type GetUserApiGetAllRolesQueryError = unknown



export function useGetUserApiGetAllRoles<TData = Awaited<ReturnType<typeof getUserApiGetAllRoles>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiGetAllRoles>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserApiGetAllRolesQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const getUserApiGetAllPermissions = (
    
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      
      
      return backendForAdminClient<void>(
      {url: `/UserApi/GetAllPermissions`, method: 'GET', signal
    },
      options);
    }
  

export const getGetUserApiGetAllPermissionsQueryKey = () => {
    return ['UserApi','GetAllPermissions'] as const;
    }

    
export const getGetUserApiGetAllPermissionsQueryOptions = <TData = Awaited<ReturnType<typeof getUserApiGetAllPermissions>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiGetAllPermissions>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetUserApiGetAllPermissionsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserApiGetAllPermissions>>> = ({ signal }) => getUserApiGetAllPermissions(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserApiGetAllPermissions>>, TError, TData> 
}

export type GetUserApiGetAllPermissionsQueryResult = NonNullable<Awaited<ReturnType<typeof getUserApiGetAllPermissions>>>
export type GetUserApiGetAllPermissionsQueryError = unknown



export function useGetUserApiGetAllPermissions<TData = Awaited<ReturnType<typeof getUserApiGetAllPermissions>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiGetAllPermissions>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserApiGetAllPermissionsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const getUserApiCreateRole = (
    params?: MaybeRef<GetUserApiCreateRoleParams>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return backendForAdminClient<void>(
      {url: `/UserApi/CreateRole`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getGetUserApiCreateRoleQueryKey = (params?: MaybeRef<GetUserApiCreateRoleParams>,) => {
    return ['UserApi','CreateRole', ...(params ? [params]: [])] as const;
    }

    
export const getGetUserApiCreateRoleQueryOptions = <TData = Awaited<ReturnType<typeof getUserApiCreateRole>>, TError = unknown>(params?: MaybeRef<GetUserApiCreateRoleParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiCreateRole>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetUserApiCreateRoleQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserApiCreateRole>>> = ({ signal }) => getUserApiCreateRole(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserApiCreateRole>>, TError, TData> 
}

export type GetUserApiCreateRoleQueryResult = NonNullable<Awaited<ReturnType<typeof getUserApiCreateRole>>>
export type GetUserApiCreateRoleQueryError = unknown



export function useGetUserApiCreateRole<TData = Awaited<ReturnType<typeof getUserApiCreateRole>>, TError = unknown>(
 params?: MaybeRef<GetUserApiCreateRoleParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiCreateRole>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserApiCreateRoleQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const getUserApiDeleteRole = (
    params?: MaybeRef<GetUserApiDeleteRoleParams>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return backendForAdminClient<BooleanApiResponse>(
      {url: `/UserApi/DeleteRole`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getGetUserApiDeleteRoleQueryKey = (params?: MaybeRef<GetUserApiDeleteRoleParams>,) => {
    return ['UserApi','DeleteRole', ...(params ? [params]: [])] as const;
    }

    
export const getGetUserApiDeleteRoleQueryOptions = <TData = Awaited<ReturnType<typeof getUserApiDeleteRole>>, TError = unknown>(params?: MaybeRef<GetUserApiDeleteRoleParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiDeleteRole>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetUserApiDeleteRoleQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserApiDeleteRole>>> = ({ signal }) => getUserApiDeleteRole(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserApiDeleteRole>>, TError, TData> 
}

export type GetUserApiDeleteRoleQueryResult = NonNullable<Awaited<ReturnType<typeof getUserApiDeleteRole>>>
export type GetUserApiDeleteRoleQueryError = unknown



export function useGetUserApiDeleteRole<TData = Awaited<ReturnType<typeof getUserApiDeleteRole>>, TError = unknown>(
 params?: MaybeRef<GetUserApiDeleteRoleParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiDeleteRole>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserApiDeleteRoleQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const getUserApiDeletePermission = (
    params?: MaybeRef<GetUserApiDeletePermissionParams>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return backendForAdminClient<BooleanApiResponse>(
      {url: `/UserApi/DeletePermission`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getGetUserApiDeletePermissionQueryKey = (params?: MaybeRef<GetUserApiDeletePermissionParams>,) => {
    return ['UserApi','DeletePermission', ...(params ? [params]: [])] as const;
    }

    
export const getGetUserApiDeletePermissionQueryOptions = <TData = Awaited<ReturnType<typeof getUserApiDeletePermission>>, TError = unknown>(params?: MaybeRef<GetUserApiDeletePermissionParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiDeletePermission>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetUserApiDeletePermissionQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserApiDeletePermission>>> = ({ signal }) => getUserApiDeletePermission(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserApiDeletePermission>>, TError, TData> 
}

export type GetUserApiDeletePermissionQueryResult = NonNullable<Awaited<ReturnType<typeof getUserApiDeletePermission>>>
export type GetUserApiDeletePermissionQueryError = unknown



export function useGetUserApiDeletePermission<TData = Awaited<ReturnType<typeof getUserApiDeletePermission>>, TError = unknown>(
 params?: MaybeRef<GetUserApiDeletePermissionParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiDeletePermission>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserApiDeletePermissionQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const postUserApiAssignUserToRole = (
    assignRoleRequest: MaybeRef<AssignRoleRequest>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      assignRoleRequest = unref(assignRoleRequest);
      
      return backendForAdminClient<void>(
      {url: `/UserApi/AssignUserToRole`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: assignRoleRequest, signal
    },
      options);
    }
  


export const getPostUserApiAssignUserToRoleMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserApiAssignUserToRole>>, TError,{data: AssignRoleRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof postUserApiAssignUserToRole>>, TError,{data: AssignRoleRequest}, TContext> => {

const mutationKey = ['postUserApiAssignUserToRole'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUserApiAssignUserToRole>>, {data: AssignRoleRequest}> = (props) => {
          const {data} = props ?? {};

          return  postUserApiAssignUserToRole(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUserApiAssignUserToRoleMutationResult = NonNullable<Awaited<ReturnType<typeof postUserApiAssignUserToRole>>>
    export type PostUserApiAssignUserToRoleMutationBody = AssignRoleRequest
    export type PostUserApiAssignUserToRoleMutationError = unknown

    export const usePostUserApiAssignUserToRole = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserApiAssignUserToRole>>, TError,{data: AssignRoleRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof postUserApiAssignUserToRole>>,
        TError,
        {data: AssignRoleRequest},
        TContext
      > => {

      const mutationOptions = getPostUserApiAssignUserToRoleMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const postUserApiRemoveRole = (
    assignRoleRequest: MaybeRef<AssignRoleRequest>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      assignRoleRequest = unref(assignRoleRequest);
      
      return backendForAdminClient<void>(
      {url: `/UserApi/RemoveRole`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: assignRoleRequest, signal
    },
      options);
    }
  


export const getPostUserApiRemoveRoleMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserApiRemoveRole>>, TError,{data: AssignRoleRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof postUserApiRemoveRole>>, TError,{data: AssignRoleRequest}, TContext> => {

const mutationKey = ['postUserApiRemoveRole'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUserApiRemoveRole>>, {data: AssignRoleRequest}> = (props) => {
          const {data} = props ?? {};

          return  postUserApiRemoveRole(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUserApiRemoveRoleMutationResult = NonNullable<Awaited<ReturnType<typeof postUserApiRemoveRole>>>
    export type PostUserApiRemoveRoleMutationBody = AssignRoleRequest
    export type PostUserApiRemoveRoleMutationError = unknown

    export const usePostUserApiRemoveRole = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserApiRemoveRole>>, TError,{data: AssignRoleRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof postUserApiRemoveRole>>,
        TError,
        {data: AssignRoleRequest},
        TContext
      > => {

      const mutationOptions = getPostUserApiRemoveRoleMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getUserApiGetRolePermissions = (
    params?: MaybeRef<GetUserApiGetRolePermissionsParams>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return backendForAdminClient<ClaimListApiResponse>(
      {url: `/UserApi/GetRolePermissions`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getGetUserApiGetRolePermissionsQueryKey = (params?: MaybeRef<GetUserApiGetRolePermissionsParams>,) => {
    return ['UserApi','GetRolePermissions', ...(params ? [params]: [])] as const;
    }

    
export const getGetUserApiGetRolePermissionsQueryOptions = <TData = Awaited<ReturnType<typeof getUserApiGetRolePermissions>>, TError = unknown>(params?: MaybeRef<GetUserApiGetRolePermissionsParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiGetRolePermissions>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetUserApiGetRolePermissionsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserApiGetRolePermissions>>> = ({ signal }) => getUserApiGetRolePermissions(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserApiGetRolePermissions>>, TError, TData> 
}

export type GetUserApiGetRolePermissionsQueryResult = NonNullable<Awaited<ReturnType<typeof getUserApiGetRolePermissions>>>
export type GetUserApiGetRolePermissionsQueryError = unknown



export function useGetUserApiGetRolePermissions<TData = Awaited<ReturnType<typeof getUserApiGetRolePermissions>>, TError = unknown>(
 params?: MaybeRef<GetUserApiGetRolePermissionsParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiGetRolePermissions>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserApiGetRolePermissionsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const postUserApiAddPermissionToRole = (
    addPermissionToRoleRequest: MaybeRef<AddPermissionToRoleRequest>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      addPermissionToRoleRequest = unref(addPermissionToRoleRequest);
      
      return backendForAdminClient<ClaimApiResponse>(
      {url: `/UserApi/AddPermissionToRole`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: addPermissionToRoleRequest, signal
    },
      options);
    }
  


export const getPostUserApiAddPermissionToRoleMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserApiAddPermissionToRole>>, TError,{data: AddPermissionToRoleRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof postUserApiAddPermissionToRole>>, TError,{data: AddPermissionToRoleRequest}, TContext> => {

const mutationKey = ['postUserApiAddPermissionToRole'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUserApiAddPermissionToRole>>, {data: AddPermissionToRoleRequest}> = (props) => {
          const {data} = props ?? {};

          return  postUserApiAddPermissionToRole(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUserApiAddPermissionToRoleMutationResult = NonNullable<Awaited<ReturnType<typeof postUserApiAddPermissionToRole>>>
    export type PostUserApiAddPermissionToRoleMutationBody = AddPermissionToRoleRequest
    export type PostUserApiAddPermissionToRoleMutationError = unknown

    export const usePostUserApiAddPermissionToRole = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserApiAddPermissionToRole>>, TError,{data: AddPermissionToRoleRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof postUserApiAddPermissionToRole>>,
        TError,
        {data: AddPermissionToRoleRequest},
        TContext
      > => {

      const mutationOptions = getPostUserApiAddPermissionToRoleMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const postUserApiRemovePermissionFromRole = (
    addPermissionToRoleRequest: MaybeRef<AddPermissionToRoleRequest>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      addPermissionToRoleRequest = unref(addPermissionToRoleRequest);
      
      return backendForAdminClient<ClaimApiResponse>(
      {url: `/UserApi/RemovePermissionFromRole`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: addPermissionToRoleRequest, signal
    },
      options);
    }
  


export const getPostUserApiRemovePermissionFromRoleMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserApiRemovePermissionFromRole>>, TError,{data: AddPermissionToRoleRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof postUserApiRemovePermissionFromRole>>, TError,{data: AddPermissionToRoleRequest}, TContext> => {

const mutationKey = ['postUserApiRemovePermissionFromRole'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUserApiRemovePermissionFromRole>>, {data: AddPermissionToRoleRequest}> = (props) => {
          const {data} = props ?? {};

          return  postUserApiRemovePermissionFromRole(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUserApiRemovePermissionFromRoleMutationResult = NonNullable<Awaited<ReturnType<typeof postUserApiRemovePermissionFromRole>>>
    export type PostUserApiRemovePermissionFromRoleMutationBody = AddPermissionToRoleRequest
    export type PostUserApiRemovePermissionFromRoleMutationError = unknown

    export const usePostUserApiRemovePermissionFromRole = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserApiRemovePermissionFromRole>>, TError,{data: AddPermissionToRoleRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof postUserApiRemovePermissionFromRole>>,
        TError,
        {data: AddPermissionToRoleRequest},
        TContext
      > => {

      const mutationOptions = getPostUserApiRemovePermissionFromRoleMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const postUserApiReplacePermissions = (
    replacePermissionsRequest: MaybeRef<ReplacePermissionsRequest>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      replacePermissionsRequest = unref(replacePermissionsRequest);
      
      return backendForAdminClient<ClaimListApiResponse>(
      {url: `/UserApi/ReplacePermissions`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: replacePermissionsRequest, signal
    },
      options);
    }
  


export const getPostUserApiReplacePermissionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserApiReplacePermissions>>, TError,{data: ReplacePermissionsRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof postUserApiReplacePermissions>>, TError,{data: ReplacePermissionsRequest}, TContext> => {

const mutationKey = ['postUserApiReplacePermissions'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUserApiReplacePermissions>>, {data: ReplacePermissionsRequest}> = (props) => {
          const {data} = props ?? {};

          return  postUserApiReplacePermissions(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUserApiReplacePermissionsMutationResult = NonNullable<Awaited<ReturnType<typeof postUserApiReplacePermissions>>>
    export type PostUserApiReplacePermissionsMutationBody = ReplacePermissionsRequest
    export type PostUserApiReplacePermissionsMutationError = unknown

    export const usePostUserApiReplacePermissions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserApiReplacePermissions>>, TError,{data: ReplacePermissionsRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof postUserApiReplacePermissions>>,
        TError,
        {data: ReplacePermissionsRequest},
        TContext
      > => {

      const mutationOptions = getPostUserApiReplacePermissionsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getUserApiGetProjectRolesWithPermissions = (
    
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      
      
      return backendForAdminClient<ApplicationRoleListApiResponse>(
      {url: `/UserApi/GetProjectRolesWithPermissions`, method: 'GET', signal
    },
      options);
    }
  

export const getGetUserApiGetProjectRolesWithPermissionsQueryKey = () => {
    return ['UserApi','GetProjectRolesWithPermissions'] as const;
    }

    
export const getGetUserApiGetProjectRolesWithPermissionsQueryOptions = <TData = Awaited<ReturnType<typeof getUserApiGetProjectRolesWithPermissions>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiGetProjectRolesWithPermissions>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetUserApiGetProjectRolesWithPermissionsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserApiGetProjectRolesWithPermissions>>> = ({ signal }) => getUserApiGetProjectRolesWithPermissions(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserApiGetProjectRolesWithPermissions>>, TError, TData> 
}

export type GetUserApiGetProjectRolesWithPermissionsQueryResult = NonNullable<Awaited<ReturnType<typeof getUserApiGetProjectRolesWithPermissions>>>
export type GetUserApiGetProjectRolesWithPermissionsQueryError = unknown



export function useGetUserApiGetProjectRolesWithPermissions<TData = Awaited<ReturnType<typeof getUserApiGetProjectRolesWithPermissions>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiGetProjectRolesWithPermissions>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserApiGetProjectRolesWithPermissionsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const postUserApiCreateRoleWithPermissions = (
    createRoleWithPermissionsRequest: MaybeRef<CreateRoleWithPermissionsRequest>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      createRoleWithPermissionsRequest = unref(createRoleWithPermissionsRequest);
      
      return backendForAdminClient<BooleanApiResponse>(
      {url: `/UserApi/CreateRoleWithPermissions`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createRoleWithPermissionsRequest, signal
    },
      options);
    }
  


export const getPostUserApiCreateRoleWithPermissionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserApiCreateRoleWithPermissions>>, TError,{data: CreateRoleWithPermissionsRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof postUserApiCreateRoleWithPermissions>>, TError,{data: CreateRoleWithPermissionsRequest}, TContext> => {

const mutationKey = ['postUserApiCreateRoleWithPermissions'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUserApiCreateRoleWithPermissions>>, {data: CreateRoleWithPermissionsRequest}> = (props) => {
          const {data} = props ?? {};

          return  postUserApiCreateRoleWithPermissions(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUserApiCreateRoleWithPermissionsMutationResult = NonNullable<Awaited<ReturnType<typeof postUserApiCreateRoleWithPermissions>>>
    export type PostUserApiCreateRoleWithPermissionsMutationBody = CreateRoleWithPermissionsRequest
    export type PostUserApiCreateRoleWithPermissionsMutationError = unknown

    export const usePostUserApiCreateRoleWithPermissions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserApiCreateRoleWithPermissions>>, TError,{data: CreateRoleWithPermissionsRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof postUserApiCreateRoleWithPermissions>>,
        TError,
        {data: CreateRoleWithPermissionsRequest},
        TContext
      > => {

      const mutationOptions = getPostUserApiCreateRoleWithPermissionsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getUserApiGetUsersWithFullRoleObjects = (
    params?: MaybeRef<GetUserApiGetUsersWithFullRoleObjectsParams>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return backendForAdminClient<UserWithRolesListPaginationResponseApiResponseTask>(
      {url: `/UserApi/GetUsersWithFullRoleObjects`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getGetUserApiGetUsersWithFullRoleObjectsQueryKey = (params?: MaybeRef<GetUserApiGetUsersWithFullRoleObjectsParams>,) => {
    return ['UserApi','GetUsersWithFullRoleObjects', ...(params ? [params]: [])] as const;
    }

    
export const getGetUserApiGetUsersWithFullRoleObjectsQueryOptions = <TData = Awaited<ReturnType<typeof getUserApiGetUsersWithFullRoleObjects>>, TError = unknown>(params?: MaybeRef<GetUserApiGetUsersWithFullRoleObjectsParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiGetUsersWithFullRoleObjects>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetUserApiGetUsersWithFullRoleObjectsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserApiGetUsersWithFullRoleObjects>>> = ({ signal }) => getUserApiGetUsersWithFullRoleObjects(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserApiGetUsersWithFullRoleObjects>>, TError, TData> 
}

export type GetUserApiGetUsersWithFullRoleObjectsQueryResult = NonNullable<Awaited<ReturnType<typeof getUserApiGetUsersWithFullRoleObjects>>>
export type GetUserApiGetUsersWithFullRoleObjectsQueryError = unknown



export function useGetUserApiGetUsersWithFullRoleObjects<TData = Awaited<ReturnType<typeof getUserApiGetUsersWithFullRoleObjects>>, TError = unknown>(
 params?: MaybeRef<GetUserApiGetUsersWithFullRoleObjectsParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiGetUsersWithFullRoleObjects>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserApiGetUsersWithFullRoleObjectsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const getUserApiGetRolesWithUsers = (
    
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      
      
      return backendForAdminClient<RoleDtoListApiResponse>(
      {url: `/UserApi/GetRolesWithUsers`, method: 'GET', signal
    },
      options);
    }
  

export const getGetUserApiGetRolesWithUsersQueryKey = () => {
    return ['UserApi','GetRolesWithUsers'] as const;
    }

    
export const getGetUserApiGetRolesWithUsersQueryOptions = <TData = Awaited<ReturnType<typeof getUserApiGetRolesWithUsers>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiGetRolesWithUsers>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetUserApiGetRolesWithUsersQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserApiGetRolesWithUsers>>> = ({ signal }) => getUserApiGetRolesWithUsers(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserApiGetRolesWithUsers>>, TError, TData> 
}

export type GetUserApiGetRolesWithUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getUserApiGetRolesWithUsers>>>
export type GetUserApiGetRolesWithUsersQueryError = unknown



export function useGetUserApiGetRolesWithUsers<TData = Awaited<ReturnType<typeof getUserApiGetRolesWithUsers>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiGetRolesWithUsers>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserApiGetRolesWithUsersQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const getUserApiGetAllUsers = (
    params?: MaybeRef<GetUserApiGetAllUsersParams>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return backendForAdminClient<UserProfileInfoDtoListPaginationResponseApiResponse>(
      {url: `/UserApi/GetAllUsers`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getGetUserApiGetAllUsersQueryKey = (params?: MaybeRef<GetUserApiGetAllUsersParams>,) => {
    return ['UserApi','GetAllUsers', ...(params ? [params]: [])] as const;
    }

    
export const getGetUserApiGetAllUsersQueryOptions = <TData = Awaited<ReturnType<typeof getUserApiGetAllUsers>>, TError = unknown>(params?: MaybeRef<GetUserApiGetAllUsersParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiGetAllUsers>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetUserApiGetAllUsersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserApiGetAllUsers>>> = ({ signal }) => getUserApiGetAllUsers(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserApiGetAllUsers>>, TError, TData> 
}

export type GetUserApiGetAllUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getUserApiGetAllUsers>>>
export type GetUserApiGetAllUsersQueryError = unknown



export function useGetUserApiGetAllUsers<TData = Awaited<ReturnType<typeof getUserApiGetAllUsers>>, TError = unknown>(
 params?: MaybeRef<GetUserApiGetAllUsersParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiGetAllUsers>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserApiGetAllUsersQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const getUserApiGetUserProfileById = (
    
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      
      
      return backendForAdminClient<UserProfileInfoDtoApiResponse>(
      {url: `/UserApi/GetUserProfileById`, method: 'GET', signal
    },
      options);
    }
  

export const getGetUserApiGetUserProfileByIdQueryKey = () => {
    return ['UserApi','GetUserProfileById'] as const;
    }

    
export const getGetUserApiGetUserProfileByIdQueryOptions = <TData = Awaited<ReturnType<typeof getUserApiGetUserProfileById>>, TError = UserProfileInfoDtoApiResponse>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiGetUserProfileById>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetUserApiGetUserProfileByIdQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserApiGetUserProfileById>>> = ({ signal }) => getUserApiGetUserProfileById(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserApiGetUserProfileById>>, TError, TData> 
}

export type GetUserApiGetUserProfileByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getUserApiGetUserProfileById>>>
export type GetUserApiGetUserProfileByIdQueryError = UserProfileInfoDtoApiResponse



export function useGetUserApiGetUserProfileById<TData = Awaited<ReturnType<typeof getUserApiGetUserProfileById>>, TError = UserProfileInfoDtoApiResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiGetUserProfileById>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserApiGetUserProfileByIdQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const getUserApiGetUserSecurityStamp = (
    params?: MaybeRef<GetUserApiGetUserSecurityStampParams>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return backendForAdminClient<StringApiResponse>(
      {url: `/UserApi/GetUserSecurityStamp`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getGetUserApiGetUserSecurityStampQueryKey = (params?: MaybeRef<GetUserApiGetUserSecurityStampParams>,) => {
    return ['UserApi','GetUserSecurityStamp', ...(params ? [params]: [])] as const;
    }

    
export const getGetUserApiGetUserSecurityStampQueryOptions = <TData = Awaited<ReturnType<typeof getUserApiGetUserSecurityStamp>>, TError = unknown>(params?: MaybeRef<GetUserApiGetUserSecurityStampParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiGetUserSecurityStamp>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetUserApiGetUserSecurityStampQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserApiGetUserSecurityStamp>>> = ({ signal }) => getUserApiGetUserSecurityStamp(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserApiGetUserSecurityStamp>>, TError, TData> 
}

export type GetUserApiGetUserSecurityStampQueryResult = NonNullable<Awaited<ReturnType<typeof getUserApiGetUserSecurityStamp>>>
export type GetUserApiGetUserSecurityStampQueryError = unknown



export function useGetUserApiGetUserSecurityStamp<TData = Awaited<ReturnType<typeof getUserApiGetUserSecurityStamp>>, TError = unknown>(
 params?: MaybeRef<GetUserApiGetUserSecurityStampParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApiGetUserSecurityStamp>>, TError, TData>>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserApiGetUserSecurityStampQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




export const postUserApiUpdateUser = (
    updateUserInformationsRequest: MaybeRef<UpdateUserInformationsRequest>,
 options?: SecondParameter<typeof backendForAdminClient>,signal?: AbortSignal
) => {
      updateUserInformationsRequest = unref(updateUserInformationsRequest);
      
      return backendForAdminClient<BooleanApiResponse>(
      {url: `/UserApi/UpdateUser`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: updateUserInformationsRequest, signal
    },
      options);
    }
  


export const getPostUserApiUpdateUserMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserApiUpdateUser>>, TError,{data: UpdateUserInformationsRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
): UseMutationOptions<Awaited<ReturnType<typeof postUserApiUpdateUser>>, TError,{data: UpdateUserInformationsRequest}, TContext> => {

const mutationKey = ['postUserApiUpdateUser'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUserApiUpdateUser>>, {data: UpdateUserInformationsRequest}> = (props) => {
          const {data} = props ?? {};

          return  postUserApiUpdateUser(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUserApiUpdateUserMutationResult = NonNullable<Awaited<ReturnType<typeof postUserApiUpdateUser>>>
    export type PostUserApiUpdateUserMutationBody = UpdateUserInformationsRequest
    export type PostUserApiUpdateUserMutationError = unknown

    export const usePostUserApiUpdateUser = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserApiUpdateUser>>, TError,{data: UpdateUserInformationsRequest}, TContext>, request?: SecondParameter<typeof backendForAdminClient>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof postUserApiUpdateUser>>,
        TError,
        {data: UpdateUserInformationsRequest},
        TContext
      > => {

      const mutationOptions = getPostUserApiUpdateUserMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
